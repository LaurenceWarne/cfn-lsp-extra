{
  "ResourceTypes": {
    "AWS::Serverless::Api": {
      "Properties": {
        "AccessLogSetting": {
          "Required": false,
          "Type": "AccessLogSetting"
        },
        "AlwaysDeploy": {
          "Required": false,
          "Type": "boolean"
        },
        "Auth": {
          "Required": false,
          "Type": "Auth"
        },
        "BinaryMediaTypes": {
          "Required": false,
          "Type": "List",
          "ItemType": "string"
        },
        "CacheClusterEnabled": {
          "Required": false,
          "Type": "boolean"
        },
        "CacheClusterSize": {
          "Required": false,
          "Type": "string"
        },
        "CanarySetting": {
          "Required": false,
          "Type": "CanarySetting"
        },
        "Cors": {
          "Required": false,
          "Type": "CorsConfiguration"
        },
        "DefinitionBody": {
          "Required": false,
          "Type": "object"
        },
        "DefinitionUri": {
          "Required": false,
          "Type": "S3Location"
        },
        "Description": {
          "Required": false,
          "Type": "string"
        },
        "DisableExecuteApiEndpoint": {
          "Required": false,
          "Type": "boolean"
        },
        "Domain": {
          "Required": false,
          "Type": "DomainConfiguration"
        },
        "EndpointConfiguration": {
          "Required": false,
          "Type": "EndpointConfiguration"
        },
        "GatewayResponses": {
          "additionalProperties": true,
          "patternProperties": {
            "^[a-zA-Z0-9]+$": {
              "type": "string"
            }
          },
          "Required": false,
          "Type": "object"
        },
        "MethodSettings": {
          "Required": false,
          "Type": "List",
          "ItemType": "object"
        },
        "MinimumCompressionSize": {
          "Required": false,
          "Type": "number"
        },
        "Models": {
          "additionalProperties": true,
          "patternProperties": {
            "^[a-zA-Z0-9]+$": {
              "type": "object"
            }
          },
          "Required": false,
          "Type": "object"
        },
        "Name": {
          "Required": false,
          "Type": "string"
        },
        "OpenApiVersion": {
          "Required": false,
          "Type": "string"
        },
        "StageName": {
          "Required": true,
          "Type": "string"
        },
        "Tags": {
          "additionalProperties": true,
          "patternProperties": {
            "^[a-zA-Z0-9]+$": {
              "type": "string"
            }
          },
          "Required": false,
          "Type": "object"
        },
        "TracingEnabled": {
          "Required": false,
          "Type": "boolean"
        },
        "Variables": {
          "additionalProperties": true,
          "patternProperties": {
            "^[a-zA-Z0-9]+$": {
              "type": "string"
            }
          },
          "Required": false,
          "Type": "object"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Api`\nCreates a collection of Amazon API Gateway resources and methods that can be invoked through\n HTTPS endpoints.\nAn AWS::Serverless::Api resource need not be\n explicitly added to a AWS Serverless Application Definition template. A resource of this type\n is implicitly created from the union of Api events defined on [AWS::Serverless::Function](./sam-resource-function.html) resources defined in\n the template that do not refer to an AWS::Serverless::Api resource.\nAn AWS::Serverless::Api resource should be\n used to define and document the API using OpenApi, which provides more ability to configure the\n underlying Amazon API Gateway resources.\nWe recommend that you use AWS CloudFormation hooks or IAM policies to verify that API Gateway resources have\n authorizers attached to them to control access to them.\nFor more information about using AWS CloudFormation hooks, see [Registering hooks](https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/registering-hook-python.html) in the *AWS CloudFormation CLI user guide* and\n the [apigw-enforce-authorizer](https://github.com/aws-cloudformation/aws-cloudformation-samples/tree/main/hooks/python-hooks/apigw-enforce-authorizer/) GitHub repository.\nFor more information about using IAM policies, see [Require that API routes have authorization](https://docs.aws.amazon.com/apigateway/latest/developerguide/security_iam_id-based-policy-examples.html#security_iam_id-based-policy-examples-require-authorization) in the *API Gateway Developer Guide*.\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\n For more information, see [Generated AWS CloudFormation resources](./sam-specification-generated-resources.html).\n"
    },
    "AWS::Serverless::Application": {
      "Properties": {
        "Location": {
          "Required": true,
          "Type": "ApplicationLocation"
        },
        "NotificationArns": {
          "Required": false,
          "Type": "List",
          "ItemType": "string"
        },
        "Parameters": {
          "additionalProperties": true,
          "patternProperties": {
            "^[a-zA-Z0-9]+$": {
              "type": "string"
            }
          },
          "Required": false,
          "Type": "object"
        },
        "Tags": {
          "additionalProperties": true,
          "patternProperties": {
            "^[a-zA-Z0-9]+$": {
              "type": "string"
            }
          },
          "Required": false,
          "Type": "object"
        },
        "TimeoutInMinutes": {
          "Required": false,
          "Type": "number"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Application`\nEmbeds a serverless application from the [AWS Serverless Application Repository](https://serverlessrepo.aws.amazon.com/applications) or from an Amazon S3 bucket as a nested application. Nested applications are deployed as nested [AWS::CloudFormation::Stack](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudformation-stack.html) resources, which can contain multiple other resources including other AWS::Serverless::Application resources.\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources. For more information,\n see [Generated AWS CloudFormation resources](./sam-specification-generated-resources.html).\n"
    },
    "AWS::Serverless::Function": {
      "Properties": {
        "Architectures": {
          "Required": false,
          "Type": "List",
          "ItemType": "string"
        },
        "AssumeRolePolicyDocument": {
          "Required": false,
          "Type": "object"
        },
        "AutoPublishAlias": {
          "Required": false,
          "Type": "string"
        },
        "AutoPublishCodeSha256": {
          "Required": false,
          "Type": "string"
        },
        "CodeSigningConfigArn": {
          "Required": false,
          "Type": "string"
        },
        "CodeUri": {
          "Required": false,
          "Type": "S3Location"
        },
        "DeadLetterQueue": {
          "Required": false,
          "Type": "DeadLetterQueue"
        },
        "DeploymentPreference": {
          "Required": false,
          "Type": "DeploymentPreference"
        },
        "Description": {
          "Required": false,
          "Type": "string"
        },
        "Environment": {
          "Required": false,
          "Type": "FunctionEnvironment"
        },
        "EphemeralStorage": {
          "Required": false,
          "Type": "EphemeralStorage"
        },
        "EventInvokeConfig": {
          "Required": false,
          "Type": "EventInvokeConfig"
        },
        "Events": {
          "additionalProperties": false,
          "patternProperties": {
            "^[a-zA-Z0-9]+$": {
              "$ref": "#/definitions/AWS::Serverless::Function.EventSource"
            }
          },
          "Required": false,
          "Type": "object"
        },
        "FileSystemConfigs": {
          "Required": false,
          "Type": "List",
          "ItemType": "FileSystemConfig"
        },
        "FunctionName": {
          "Required": false,
          "Type": "string"
        },
        "FunctionUrlConfig": {
          "Required": false,
          "Type": "FunctionUrlConfig"
        },
        "Handler": {
          "Required": false,
          "Type": "string"
        },
        "ImageConfig": {
          "Required": false,
          "Type": "ImageConfig"
        },
        "ImageUri": {
          "Required": false,
          "Type": "string"
        },
        "InlineCode": {
          "Required": false,
          "Type": "string"
        },
        "KmsKeyArn": {
          "Required": false,
          "Type": "string"
        },
        "Layers": {
          "Required": false,
          "Type": "List",
          "ItemType": "string"
        },
        "MemorySize": {
          "Required": false,
          "Type": "number"
        },
        "PackageType": {
          "Required": false,
          "Type": "string"
        },
        "PermissionsBoundary": {
          "Required": false,
          "Type": "string"
        },
        "Policies": {
          "Required": false,
          "Type": "IAMPolicyDocument"
        },
        "ProvisionedConcurrencyConfig": {
          "Required": false,
          "Type": "ProvisionedConcurrencyConfig"
        },
        "ReservedConcurrentExecutions": {
          "Required": false,
          "Type": "number"
        },
        "Role": {
          "Required": false,
          "Type": "string"
        },
        "Runtime": {
          "Required": false,
          "Type": "string"
        },
        "Tags": {
          "additionalProperties": true,
          "patternProperties": {
            "^[a-zA-Z0-9]+$": {
              "type": "string"
            }
          },
          "Required": false,
          "Type": "object"
        },
        "Timeout": {
          "Required": false,
          "Type": "number"
        },
        "Tracing": {
          "Required": false,
          "Type": "string"
        },
        "VersionDescription": {
          "Required": false,
          "Type": "string"
        },
        "VpcConfig": {
          "Required": false,
          "Type": "VpcConfig"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function`\nCreates an AWS Lambda function, an AWS Identity and Access Management (IAM) execution role, and event source\n mappings that trigger the function.\nThe AWS::Serverless::Function resource\n also supports the `Metadata` resource attribute, so you can instruct AWS SAM to build\n custom runtimes that your application requires. For more information about building custom\n runtimes, see [Building Lambda functions with custom runtimes](./building-custom-runtimes.html).\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\n For more information, see [Generated AWS CloudFormation resources](./sam-specification-generated-resources.html).\n"
    },
    "AWS::Serverless::HttpApi": {
      "Properties": {
        "AccessLogSetting": {
          "Required": false,
          "Type": "AccessLogSetting"
        },
        "Auth": {
          "Required": false,
          "Type": "HttpApiAuth"
        },
        "CorsConfiguration": {
          "Required": false,
          "Type": "CorsConfigurationObject"
        },
        "DefaultRouteSettings": {
          "Required": false,
          "Type": "RouteSettings"
        },
        "DefinitionBody": {
          "Required": false,
          "Type": "object"
        },
        "DefinitionUri": {
          "Required": false,
          "Type": "S3Location"
        },
        "Description": {
          "Required": false,
          "Type": "string"
        },
        "DisableExecuteApiEndpoint": {
          "Required": false,
          "Type": "boolean"
        },
        "Domain": {
          "Required": false,
          "Type": "HttpApiDomainConfiguration"
        },
        "FailOnWarnings": {
          "Required": false,
          "Type": "boolean"
        },
        "RouteSettings": {
          "Required": false,
          "Type": "RouteSettings"
        },
        "StageName": {
          "Required": false,
          "Type": "string"
        },
        "StageVariables": {
          "additionalProperties": true,
          "patternProperties": {
            "^[a-zA-Z0-9]+$": {
              "type": "string"
            }
          },
          "Required": false,
          "Type": "object"
        },
        "Tags": {
          "additionalProperties": true,
          "patternProperties": {
            "^[a-zA-Z0-9]+$": {
              "type": "string"
            }
          },
          "Required": false,
          "Type": "object"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::HttpApi`\nCreates an Amazon API Gateway HTTP API, which enables you to create RESTful APIs with lower latency\n and lower costs than REST APIs. For more information, see [Working with HTTP\n APIs](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api.html) in the *API Gateway Developer Guide*.\nWe recommend that you use AWS CloudFormation hooks or IAM policies to verify that API Gateway resources have\n authorizers attached to them to control access to them.\nFor more information about using AWS CloudFormation hooks, see [Registering hooks](https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/registering-hook-python.html) in the *AWS CloudFormation CLI user guide* and\n the [apigw-enforce-authorizer](https://github.com/aws-cloudformation/aws-cloudformation-samples/tree/main/hooks/python-hooks/apigw-enforce-authorizer/) GitHub repository.\nFor more information about using IAM policies, see [Require that API routes have authorization](https://docs.aws.amazon.com/apigateway/latest/developerguide/security_iam_id-based-policy-examples.html#security_iam_id-based-policy-examples-require-authorization) in the *API Gateway Developer Guide*.\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\n For more information, see [Generated AWS CloudFormation resources](./sam-specification-generated-resources.html).\n"
    },
    "AWS::Serverless::LayerVersion": {
      "Properties": {
        "CompatibleRuntimes": {
          "Required": false,
          "Type": "List",
          "ItemType": "string"
        },
        "ContentUri": {
          "Required": false,
          "Type": "S3Location"
        },
        "Description": {
          "Required": false,
          "Type": "string"
        },
        "LayerName": {
          "Required": false,
          "Type": "string"
        },
        "LicenseInfo": {
          "Required": false,
          "Type": "string"
        },
        "RetentionPolicy": {
          "Required": false,
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::LayerVersion`\nCreates a Lambda LayerVersion that contains library or runtime code needed by a Lambda Function.\nThe AWS::Serverless::LayerVersion resource also supports the `Metadata` resource attribute, so you can instruct AWS SAM to build layers included in your application. For more information about building layers, see [Building Lambda layers](./building-layers.html).\n**Important Note**: Since the release of the [UpdateReplacePolicy](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-updatereplacepolicy.html) resource attribute in AWS CloudFormation, [AWS::Lambda::LayerVersion](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-layerversion.html) (recommended) offers the same benefits as AWS::Serverless::LayerVersion.\nWhen a Serverless LayerVersion is transformed, SAM also transforms the logical id of the resource so that old LayerVersions are not automatically deleted by CloudFormation when the resource is updated.\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources. For more information,\n see [Generated AWS CloudFormation resources](./sam-specification-generated-resources.html).\n"
    },
    "AWS::Serverless::SimpleTable": {
      "Properties": {
        "PrimaryKey": {
          "Required": false,
          "Type": "PrimaryKey"
        },
        "ProvisionedThroughput": {
          "Required": false,
          "Type": "ProvisionedThroughput"
        },
        "SSESpecification": {
          "Required": false,
          "Type": "SSESpecification"
        },
        "TableName": {
          "Required": false,
          "Type": "string"
        },
        "Tags": {
          "additionalProperties": true,
          "patternProperties": {
            "^[a-zA-Z0-9]+$": {
              "type": "string"
            }
          },
          "Required": false,
          "Type": "object"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::SimpleTable`\nCreates a DynamoDB table with a single attribute primary key. It is useful when data only\n needs to be accessed via a primary key.\nTo use the more advanced functionality of DynamoDB, use an [AWS::DynamoDB::Table](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-dynamodb-table.html) resource instead.\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\n For more information, see [Generated AWS CloudFormation resources](./sam-specification-generated-resources.html).\n"
    },
    "AWS::Serverless::StateMachine": {
      "Properties": {
        "Definition": {
          "Required": false,
          "Type": "object"
        },
        "DefinitionSubstitutions": {
          "additionalProperties": true,
          "patternProperties": {
            "^[a-zA-Z0-9]+$": {
              "type": "string"
            }
          },
          "Required": false,
          "Type": "object"
        },
        "DefinitionUri": {
          "Required": false,
          "Type": "S3Location"
        },
        "Events": {
          "additionalProperties": false,
          "patternProperties": {
            "^[a-zA-Z0-9]+$": {
              "$ref": "#/definitions/AWS::Serverless::StateMachine.EventSource"
            }
          },
          "Required": false,
          "Type": "object"
        },
        "Logging": {
          "Required": false,
          "Type": "LoggingConfiguration"
        },
        "Name": {
          "Required": false,
          "Type": "string"
        },
        "PermissionsBoundaries": {
          "Required": false,
          "Type": "string"
        },
        "Policies": {
          "Required": false,
          "Type": "IAMPolicyDocument"
        },
        "Role": {
          "Required": false,
          "Type": "string"
        },
        "Tags": {
          "additionalProperties": true,
          "patternProperties": {
            "^[a-zA-Z0-9]+$": {
              "type": "string"
            }
          },
          "Required": false,
          "Type": "object"
        },
        "Tracing": {
          "Required": false,
          "Type": "TracingConfiguration"
        },
        "Type": {
          "Required": false,
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::StateMachine`\nCreates an AWS Step Functions state machine, which you can use to orchestrate AWS Lambda functions and\n other AWS resources to form complex and robust workflows.\nFor more information about Step Functions, see the [AWS Step Functions Developer Guide](https://docs.aws.amazon.com/step-functions/latest/dg/welcome.html).\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\n For more information, see [Generated AWS CloudFormation resources](./sam-specification-generated-resources.html).\n"
    }
  },
  "PropertyTypes": {
    "AWS::Serverless::Api.AccessLogSetting": {
      "Properties": {
        "DestinationArn": {
          "Type": "string"
        },
        "Format": {
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Api.AccessLogSetting`\n"
    },
    "AWS::Serverless::Api.Auth": {
      "Properties": {
        "AddDefaultAuthorizerToCorsPreflight": {
          "Type": "boolean"
        },
        "Authorizers": {
          "Type": "object"
        },
        "DefaultAuthorizer": {
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Api.Auth`\n"
    },
    "AWS::Serverless::Api.CanarySetting": {
      "Properties": {
        "DeploymentId": {
          "Type": "string"
        },
        "PercentTraffic": {
          "Type": "number"
        },
        "StageVariableOverrides": {
          "additionalProperties": true,
          "patternProperties": {
            "^[a-zA-Z0-9]+$": {
              "type": "string"
            }
          },
          "Type": "object"
        },
        "UseStageCache": {
          "Type": "boolean"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Api.CanarySetting`\n"
    },
    "AWS::Serverless::Api.CorsConfiguration": {
      "Properties": {
        "AllowCredentials": {
          "Type": "boolean"
        },
        "AllowHeaders": {
          "Type": "string"
        },
        "AllowMethods": {
          "Type": "string"
        },
        "AllowOrigin": {
          "Type": "string"
        },
        "MaxAge": {
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Api.CorsConfiguration`\n"
    },
    "AWS::Serverless::Api.DomainConfiguration": {
      "Properties": {
        "BasePath": {
          "Type": "List",
          "ItemType": "string"
        },
        "CertificateArn": {
          "Type": "string"
        },
        "DomainName": {
          "Type": "string"
        },
        "EndpointConfiguration": {
          "Type": "string"
        },
        "MutualTlsAuthentication": {
          "Type": "MutualTlsAuthentication"
        },
        "OwnershipVerificationCertificateArn": {
          "Type": "string"
        },
        "Route53": {
          "Type": "Route53Configuration"
        },
        "SecurityPolicy": {
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Api.DomainConfiguration`\n"
    },
    "AWS::Serverless::Api.EndpointConfiguration": {
      "Properties": {
        "Type": {
          "Type": "string"
        },
        "VpcEndpointIds": {
          "Type": "List",
          "ItemType": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Api.EndpointConfiguration`\n"
    },
    "AWS::Serverless::Api.MutualTlsAuthentication": {
      "Properties": {
        "TruststoreUri": {
          "Type": "string"
        },
        "TruststoreVersion": {
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Api.MutualTlsAuthentication`\n"
    },
    "AWS::Serverless::Api.Route53Configuration": {
      "Properties": {
        "DistributedDomainName": {
          "Type": "string"
        },
        "EvaluateTargetHealth": {
          "Type": "boolean"
        },
        "HostedZoneId": {
          "Type": "string"
        },
        "HostedZoneName": {
          "Type": "string"
        },
        "IpV6": {
          "Type": "boolean"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Api.Route53Configuration`\n"
    },
    "AWS::Serverless::Api.S3Location": {
      "Properties": {
        "Bucket": {
          "Type": "string"
        },
        "Key": {
          "Type": "string"
        },
        "Version": {
          "Type": "number"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Api.S3Location`\n"
    },
    "AWS::Serverless::Application.ApplicationLocation": {
      "Properties": {
        "ApplicationId": {
          "Type": "string"
        },
        "SemanticVersion": {
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Application.ApplicationLocation`\n"
    },
    "AWS::Serverless::Function.AlexaSkillEvent": {
      "Properties": {
        "SkillId": {
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.AlexaSkillEvent`\n"
    },
    "AWS::Serverless::Function.ApiEvent": {
      "Properties": {
        "Auth": {
          "Type": "Auth"
        },
        "Method": {
          "Type": "string"
        },
        "Path": {
          "Type": "string"
        },
        "RequestModel": {
          "Type": "RequestModel"
        },
        "RequestParameters": {
          "Type": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "patternProperties": {
                    "^[a-zA-Z0-9]+$": {
                      "$ref": "#/definitions/AWS::Serverless::Function.RequestParameter"
                    }
                  }
                }
              ]
            },
            "type": "array"
          }
        },
        "RestApiId": {
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.ApiEvent`\n"
    },
    "AWS::Serverless::Function.Auth": {
      "Properties": {
        "ApiKeyRequired": {
          "Type": "boolean"
        },
        "AuthorizationScopes": {
          "Type": "List",
          "ItemType": "string"
        },
        "Authorizer": {
          "Type": "string"
        },
        "ResourcePolicy": {
          "Type": "AuthResourcePolicy"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.Auth`\n"
    },
    "AWS::Serverless::Function.AuthResourcePolicy": {
      "Properties": {
        "AwsAccountBlacklist": {
          "Type": "List",
          "ItemType": "string"
        },
        "AwsAccountWhitelist": {
          "Type": "List",
          "ItemType": "string"
        },
        "CustomStatements": {
          "Type": "List",
          "ItemType": "object"
        },
        "IntrinsicVpcBlacklist": {
          "Type": "List",
          "ItemType": "string"
        },
        "IntrinsicVpcWhitelist": {
          "Type": "List",
          "ItemType": "string"
        },
        "IntrinsicVpceBlacklist": {
          "Type": "List",
          "ItemType": "string"
        },
        "IntrinsicVpceWhitelist": {
          "Type": "List",
          "ItemType": "string"
        },
        "IpRangeBlacklist": {
          "Type": "List",
          "ItemType": "string"
        },
        "IpRangeWhitelist": {
          "Type": "List",
          "ItemType": "string"
        },
        "SourceVpcBlacklist": {
          "Type": "List",
          "ItemType": "string"
        },
        "SourceVpcWhitelist": {
          "Type": "List",
          "ItemType": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.AuthResourcePolicy`\n"
    },
    "AWS::Serverless::Function.BucketSAMPT": {
      "Properties": {
        "BucketName": {
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.BucketSAMPT`\n"
    },
    "AWS::Serverless::Function.CloudWatchEventEvent": {
      "Properties": {
        "Input": {
          "Type": "string"
        },
        "InputPath": {
          "Type": "string"
        },
        "Pattern": {
          "Type": "object"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.CloudWatchEventEvent`\n"
    },
    "AWS::Serverless::Function.CloudWatchLogsEvent": {
      "Properties": {
        "FilterPattern": {
          "Type": "string"
        },
        "LogGroupName": {
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.CloudWatchLogsEvent`\n"
    },
    "AWS::Serverless::Function.CognitoEvent": {
      "Properties": {
        "Trigger": {
          "Type": {
            "type": [
              "string"
            ]
          }
        },
        "UserPool": {
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.CognitoEvent`\n"
    },
    "AWS::Serverless::Function.CollectionSAMPT": {
      "Properties": {
        "CollectionId": {
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.CollectionSAMPT`\n"
    },
    "AWS::Serverless::Function.CorsConfiguration": {
      "Properties": {
        "AllowCredentials": {
          "Type": "boolean"
        },
        "AllowHeaders": {
          "Type": "string"
        },
        "AllowMethods": {
          "Type": "string"
        },
        "AllowOrigin": {
          "Type": "string"
        },
        "MaxAge": {
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.CorsConfiguration`\n"
    },
    "AWS::Serverless::Function.DeadLetterQueue": {
      "Properties": {
        "TargetArn": {
          "Type": "string"
        },
        "Type": {
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.DeadLetterQueue`\n"
    },
    "AWS::Serverless::Function.DeploymentPreference": {
      "Properties": {
        "Alarms": {
          "Type": "List",
          "ItemType": "string"
        },
        "Enabled": {
          "Type": "boolean"
        },
        "Hooks": {
          "additionalProperties": true,
          "patternProperties": {
            "^[a-zA-Z0-9]+$": {
              "type": "string"
            }
          },
          "Type": "object"
        },
        "Role": {
          "Type": "string"
        },
        "Type": {
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.DeploymentPreference`\n"
    },
    "AWS::Serverless::Function.Destination": {
      "Properties": {
        "Destination": {
          "Type": "string"
        },
        "Type": {
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.Destination`\n"
    },
    "AWS::Serverless::Function.DestinationConfig": {
      "Properties": {
        "OnFailure": {
          "Type": "Destination"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.DestinationConfig`\n"
    },
    "AWS::Serverless::Function.DomainSAMPT": {
      "Properties": {
        "DomainName": {
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.DomainSAMPT`\n"
    },
    "AWS::Serverless::Function.DynamoDBEvent": {
      "Properties": {
        "BatchSize": {
          "Type": "number"
        },
        "BisectBatchOnFunctionError": {
          "Type": "boolean"
        },
        "DestinationConfig": {
          "Type": "DestinationConfig"
        },
        "Enabled": {
          "Type": "boolean"
        },
        "MaximumBatchingWindowInSeconds": {
          "Type": "number"
        },
        "MaximumRecordAgeInSeconds": {
          "Type": "number"
        },
        "MaximumRetryAttempts": {
          "Type": "number"
        },
        "ParallelizationFactor": {
          "Type": "number"
        },
        "StartingPosition": {
          "Type": "string"
        },
        "Stream": {
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.DynamoDBEvent`\n"
    },
    "AWS::Serverless::Function.EmptySAMPT": {
      "Properties": {},
      "MarkdownDocumentation": "`AWS::Serverless::Function.EmptySAMPT`\n"
    },
    "AWS::Serverless::Function.EphemeralStorage": {
      "Properties": {
        "Size": {
          "Type": "number"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.EphemeralStorage`\n"
    },
    "AWS::Serverless::Function.EventBridgeRuleEvent": {
      "Properties": {
        "EventBusName": {
          "Type": "string"
        },
        "Input": {
          "Type": "string"
        },
        "InputPath": {
          "Type": "string"
        },
        "Pattern": {
          "Type": "object"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.EventBridgeRuleEvent`\n"
    },
    "AWS::Serverless::Function.EventInvokeConfig": {
      "Properties": {
        "DestinationConfig": {
          "Type": "EventInvokeDestinationConfig"
        },
        "MaximumEventAgeInSeconds": {
          "Type": "number"
        },
        "MaximumRetryAttempts": {
          "Type": "number"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.EventInvokeConfig`\n"
    },
    "AWS::Serverless::Function.EventInvokeDestinationConfig": {
      "Properties": {
        "OnFailure": {
          "Type": "Destination"
        },
        "OnSuccess": {
          "Type": "Destination"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.EventInvokeDestinationConfig`\n"
    },
    "AWS::Serverless::Function.EventSource": {
      "Properties": {
        "Properties": {
          "Type": "S3Event"
        },
        "Type": {
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.EventSource`\n"
    },
    "AWS::Serverless::Function.FileSystemConfig": {
      "Properties": {
        "Arn": {
          "Type": "string"
        },
        "LocalMountPath": {
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.FileSystemConfig`\n"
    },
    "AWS::Serverless::Function.FunctionEnvironment": {
      "Properties": {
        "Variables": {
          "additionalProperties": true,
          "patternProperties": {
            "^[a-zA-Z0-9]+$": {
              "type": "string"
            }
          },
          "Type": "object"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.FunctionEnvironment`\n"
    },
    "AWS::Serverless::Function.FunctionSAMPT": {
      "Properties": {
        "FunctionName": {
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.FunctionSAMPT`\n"
    },
    "AWS::Serverless::Function.FunctionUrlConfig": {
      "Properties": {
        "AuthType": {
          "Type": "string"
        },
        "Cors": {
          "Type": "CorsConfiguration"
        },
        "InvokeMode": {
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.FunctionUrlConfig`\n"
    },
    "AWS::Serverless::Function.HttpApiEvent": {
      "Properties": {
        "ApiId": {
          "Type": "string"
        },
        "Auth": {
          "Type": "HttpApiFunctionAuth"
        },
        "Method": {
          "Type": "string"
        },
        "Path": {
          "Type": "string"
        },
        "PayloadFormatVersion": {
          "Type": "string"
        },
        "RouteSettings": {
          "Type": "RouteSettings"
        },
        "TimeoutInMillis": {
          "Type": "number"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.HttpApiEvent`\n"
    },
    "AWS::Serverless::Function.HttpApiFunctionAuth": {
      "Properties": {
        "AuthorizationScopes": {
          "Type": "List",
          "ItemType": "string"
        },
        "Authorizer": {
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.HttpApiFunctionAuth`\n"
    },
    "AWS::Serverless::Function.IAMPolicyDocument": {
      "Properties": {
        "Statement": {
          "Type": "List",
          "ItemType": "object"
        },
        "Version": {
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.IAMPolicyDocument`\n"
    },
    "AWS::Serverless::Function.IdentitySAMPT": {
      "Properties": {
        "IdentityName": {
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.IdentitySAMPT`\n"
    },
    "AWS::Serverless::Function.ImageConfig": {
      "Properties": {
        "Command": {
          "Type": "List",
          "ItemType": "string"
        },
        "EntryPoint": {
          "Type": "List",
          "ItemType": "string"
        },
        "WorkingDirectory": {
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.ImageConfig`\n"
    },
    "AWS::Serverless::Function.IoTRuleEvent": {
      "Properties": {
        "AwsIotSqlVersion": {
          "Type": "string"
        },
        "Sql": {
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.IoTRuleEvent`\n"
    },
    "AWS::Serverless::Function.KeySAMPT": {
      "Properties": {
        "KeyId": {
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.KeySAMPT`\n"
    },
    "AWS::Serverless::Function.KinesisEvent": {
      "Properties": {
        "BatchSize": {
          "Type": "number"
        },
        "Enabled": {
          "Type": "boolean"
        },
        "FunctionResponseTypes": {
          "Type": "List",
          "ItemType": "string"
        },
        "StartingPosition": {
          "Type": "string"
        },
        "Stream": {
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.KinesisEvent`\n"
    },
    "AWS::Serverless::Function.LogGroupSAMPT": {
      "Properties": {
        "LogGroupName": {
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.LogGroupSAMPT`\n"
    },
    "AWS::Serverless::Function.ParameterNameSAMPT": {
      "Properties": {
        "ParameterName": {
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.ParameterNameSAMPT`\n"
    },
    "AWS::Serverless::Function.ProvisionedConcurrencyConfig": {
      "Properties": {
        "ProvisionedConcurrentExecutions": {
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.ProvisionedConcurrencyConfig`\n"
    },
    "AWS::Serverless::Function.QueueSAMPT": {
      "Properties": {
        "QueueName": {
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.QueueSAMPT`\n"
    },
    "AWS::Serverless::Function.RequestModel": {
      "Properties": {
        "Model": {
          "Type": "string"
        },
        "Required": {
          "Type": "boolean"
        },
        "ValidateBody": {
          "Type": "boolean"
        },
        "ValidateParameters": {
          "Type": "boolean"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.RequestModel`\n"
    },
    "AWS::Serverless::Function.RequestParameter": {
      "Properties": {
        "Caching": {
          "Type": "boolean"
        },
        "Required": {
          "Type": "boolean"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.RequestParameter`\n"
    },
    "AWS::Serverless::Function.RouteSettings": {
      "Properties": {
        "DataTraceEnabled": {
          "Type": "boolean"
        },
        "DetailedMetricsEnabled": {
          "Type": "boolean"
        },
        "LoggingLevel": {
          "Type": "string"
        },
        "ThrottlingBurstLimit": {
          "Type": "number"
        },
        "ThrottlingRateLimit": {
          "Type": "number"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.RouteSettings`\n"
    },
    "AWS::Serverless::Function.S3Event": {
      "Properties": {
        "Bucket": {
          "Type": "string"
        },
        "Events": {
          "Type": {
            "type": [
              "string"
            ]
          }
        },
        "Filter": {
          "Type": "S3NotificationFilter"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.S3Event`\n"
    },
    "AWS::Serverless::Function.S3KeyFilter": {
      "Properties": {
        "Rules": {
          "Type": "List",
          "ItemType": "S3KeyFilterRule"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.S3KeyFilter`\n"
    },
    "AWS::Serverless::Function.S3KeyFilterRule": {
      "Properties": {
        "Name": {
          "Type": "string"
        },
        "Value": {
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.S3KeyFilterRule`\n"
    },
    "AWS::Serverless::Function.S3Location": {
      "Properties": {
        "Bucket": {
          "Type": "string"
        },
        "Key": {
          "Type": "string"
        },
        "Version": {
          "Type": "number"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.S3Location`\n"
    },
    "AWS::Serverless::Function.S3NotificationFilter": {
      "Properties": {
        "S3Key": {
          "Type": "S3KeyFilter"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.S3NotificationFilter`\n"
    },
    "AWS::Serverless::Function.SAMPolicyTemplate": {
      "Properties": {
        "AMIDescribePolicy": {
          "Type": "EmptySAMPT"
        },
        "AWSSecretsManagerGetSecretValuePolicy": {
          "Type": "SecretArnSAMPT"
        },
        "CloudFormationDescribeStacksPolicy": {
          "Type": "EmptySAMPT"
        },
        "CloudWatchPutMetricPolicy": {
          "Type": "EmptySAMPT"
        },
        "DynamoDBCrudPolicy": {
          "Type": "TableSAMPT"
        },
        "DynamoDBReadPolicy": {
          "Type": "TableSAMPT"
        },
        "DynamoDBStreamReadPolicy": {
          "Type": "TableStreamSAMPT"
        },
        "DynamoDBWritePolicy": {
          "Type": "TableSAMPT"
        },
        "EC2DescribePolicy": {
          "Type": "EmptySAMPT"
        },
        "ElasticsearchHttpPostPolicy": {
          "Type": "DomainSAMPT"
        },
        "FilterLogEventsPolicy": {
          "Type": "LogGroupSAMPT"
        },
        "KMSDecryptPolicy": {
          "Type": "KeySAMPT"
        },
        "KinesisCrudPolicy": {
          "Type": "StreamSAMPT"
        },
        "KinesisStreamReadPolicy": {
          "Type": "StreamSAMPT"
        },
        "LambdaInvokePolicy": {
          "Type": "FunctionSAMPT"
        },
        "RekognitionDetectOnlyPolicy": {
          "Type": "EmptySAMPT"
        },
        "RekognitionLabelsPolicy": {
          "Type": "EmptySAMPT"
        },
        "RekognitionNoDataAccessPolicy": {
          "Type": "CollectionSAMPT"
        },
        "RekognitionReadPolicy": {
          "Type": "CollectionSAMPT"
        },
        "RekognitionWriteOnlyAccessPolicy": {
          "Type": "CollectionSAMPT"
        },
        "S3CrudPolicy": {
          "Type": "BucketSAMPT"
        },
        "S3ReadPolicy": {
          "Type": "BucketSAMPT"
        },
        "S3WritePolicy": {
          "Type": "BucketSAMPT"
        },
        "SESBulkTemplatedCrudPolicy": {
          "Type": "IdentitySAMPT"
        },
        "SESCrudPolicy": {
          "Type": "IdentitySAMPT"
        },
        "SESEmailTemplateCrudPolicy": {
          "Type": "EmptySAMPT"
        },
        "SESSendBouncePolicy": {
          "Type": "IdentitySAMPT"
        },
        "SNSCrudPolicy": {
          "Type": "TopicSAMPT"
        },
        "SNSPublishMessagePolicy": {
          "Type": "TopicSAMPT"
        },
        "SQSPollerPolicy": {
          "Type": "QueueSAMPT"
        },
        "SQSSendMessagePolicy": {
          "Type": "QueueSAMPT"
        },
        "SSMParameterReadPolicy": {
          "Type": "ParameterNameSAMPT"
        },
        "StepFunctionsExecutionPolicy": {
          "Type": "StateMachineSAMPT"
        },
        "VPCAccessPolicy": {
          "Type": "EmptySAMPT"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.SAMPolicyTemplate`\n"
    },
    "AWS::Serverless::Function.SNSEvent": {
      "Properties": {
        "Topic": {
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.SNSEvent`\n"
    },
    "AWS::Serverless::Function.SQSEvent": {
      "Properties": {
        "BatchSize": {
          "Type": "number"
        },
        "Enabled": {
          "Type": "boolean"
        },
        "Queue": {
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.SQSEvent`\n"
    },
    "AWS::Serverless::Function.ScheduleEvent": {
      "Properties": {
        "Description": {
          "Type": "string"
        },
        "Enabled": {
          "Type": "boolean"
        },
        "Input": {
          "Type": "string"
        },
        "Name": {
          "Type": "string"
        },
        "Schedule": {
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.ScheduleEvent`\n"
    },
    "AWS::Serverless::Function.SecretArnSAMPT": {
      "Properties": {
        "SecretArn": {
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.SecretArnSAMPT`\n"
    },
    "AWS::Serverless::Function.StateMachineSAMPT": {
      "Properties": {
        "StateMachineName": {
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.StateMachineSAMPT`\n"
    },
    "AWS::Serverless::Function.StreamSAMPT": {
      "Properties": {
        "StreamName": {
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.StreamSAMPT`\n"
    },
    "AWS::Serverless::Function.TableSAMPT": {
      "Properties": {
        "TableName": {
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.TableSAMPT`\n"
    },
    "AWS::Serverless::Function.TableStreamSAMPT": {
      "Properties": {
        "StreamName": {
          "Type": "string"
        },
        "TableName": {
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.TableStreamSAMPT`\n"
    },
    "AWS::Serverless::Function.TopicSAMPT": {
      "Properties": {
        "TopicName": {
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.TopicSAMPT`\n"
    },
    "AWS::Serverless::Function.VpcConfig": {
      "Properties": {
        "SecurityGroupIds": {
          "Type": "List",
          "ItemType": "string"
        },
        "SubnetIds": {
          "Type": "List",
          "ItemType": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.VpcConfig`\n"
    },
    "AWS::Serverless::HttpApi.AccessLogSetting": {
      "Properties": {
        "DestinationArn": {
          "Type": "string"
        },
        "Format": {
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::HttpApi.AccessLogSetting`\n"
    },
    "AWS::Serverless::HttpApi.CorsConfigurationObject": {
      "Properties": {
        "AllowCredentials": {
          "Type": "boolean"
        },
        "AllowHeaders": {
          "Type": "List",
          "ItemType": "string"
        },
        "AllowMethods": {
          "Type": "List",
          "ItemType": "string"
        },
        "AllowOrigins": {
          "Type": "List",
          "ItemType": "string"
        },
        "ExposeHeaders": {
          "Type": "List",
          "ItemType": "string"
        },
        "MaxAge": {
          "Type": "number"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::HttpApi.CorsConfigurationObject`\n"
    },
    "AWS::Serverless::HttpApi.HttpApiAuth": {
      "Properties": {
        "Authorizers": {
          "Type": "object"
        },
        "DefaultAuthorizer": {
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::HttpApi.HttpApiAuth`\n"
    },
    "AWS::Serverless::HttpApi.HttpApiDomainConfiguration": {
      "Properties": {
        "BasePath": {
          "Type": "string"
        },
        "CertificateArn": {
          "Type": "string"
        },
        "DomainName": {
          "Type": "string"
        },
        "EndpointConfiguration": {
          "Type": "string"
        },
        "MutualTlsAuthentication": {
          "Type": "MutualTlsAuthentication"
        },
        "Route53": {
          "Type": "Route53Configuration"
        },
        "SecurityPolicy": {
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::HttpApi.HttpApiDomainConfiguration`\n"
    },
    "AWS::Serverless::HttpApi.MutualTlsAuthentication": {
      "Properties": {
        "TruststoreUri": {
          "Type": "string"
        },
        "TruststoreVersion": {
          "Type": "boolean"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::HttpApi.MutualTlsAuthentication`\n"
    },
    "AWS::Serverless::HttpApi.Route53Configuration": {
      "Properties": {
        "DistributedDomainName": {
          "Type": "string"
        },
        "EvaluateTargetHealth": {
          "Type": "boolean"
        },
        "HostedZoneId": {
          "Type": "string"
        },
        "HostedZoneName": {
          "Type": "string"
        },
        "IpV6": {
          "Type": "boolean"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::HttpApi.Route53Configuration`\n"
    },
    "AWS::Serverless::HttpApi.RouteSettings": {
      "Properties": {
        "DataTraceEnabled": {
          "Type": "boolean"
        },
        "DetailedMetricsEnabled": {
          "Type": "boolean"
        },
        "LoggingLevel": {
          "Type": "string"
        },
        "ThrottlingBurstLimit": {
          "Type": "number"
        },
        "ThrottlingRateLimit": {
          "Type": "number"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::HttpApi.RouteSettings`\n"
    },
    "AWS::Serverless::HttpApi.S3Location": {
      "Properties": {
        "Bucket": {
          "Type": "string"
        },
        "Key": {
          "Type": "string"
        },
        "Version": {
          "Type": "number"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::HttpApi.S3Location`\n"
    },
    "AWS::Serverless::LayerVersion.S3Location": {
      "Properties": {
        "Bucket": {
          "Type": "string"
        },
        "Key": {
          "Type": "string"
        },
        "Version": {
          "Type": "number"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::LayerVersion.S3Location`\n"
    },
    "AWS::Serverless::SimpleTable.PrimaryKey": {
      "Properties": {
        "Name": {
          "Type": "string"
        },
        "Type": {
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::SimpleTable.PrimaryKey`\n"
    },
    "AWS::Serverless::SimpleTable.ProvisionedThroughput": {
      "Properties": {
        "ReadCapacityUnits": {
          "Type": "number"
        },
        "WriteCapacityUnits": {
          "Type": "number"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::SimpleTable.ProvisionedThroughput`\n"
    },
    "AWS::Serverless::SimpleTable.SSESpecification": {
      "Properties": {
        "SSEEnabled": {
          "Type": "boolean"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::SimpleTable.SSESpecification`\n"
    },
    "AWS::Serverless::StateMachine.ApiEvent": {
      "Properties": {
        "Method": {
          "Type": "string"
        },
        "Path": {
          "Type": "string"
        },
        "RestApiId": {
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::StateMachine.ApiEvent`\n"
    },
    "AWS::Serverless::StateMachine.CloudWatchEventEvent": {
      "Properties": {
        "EventBusName": {
          "Type": "string"
        },
        "Input": {
          "Type": "string"
        },
        "InputPath": {
          "Type": "string"
        },
        "Pattern": {
          "Type": "object"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::StateMachine.CloudWatchEventEvent`\n"
    },
    "AWS::Serverless::StateMachine.CloudWatchLogsLogGroup": {
      "Properties": {
        "LogGroupArn": {
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::StateMachine.CloudWatchLogsLogGroup`\n"
    },
    "AWS::Serverless::StateMachine.EventBridgeRuleEvent": {
      "Properties": {
        "EventBusName": {
          "Type": "string"
        },
        "Input": {
          "Type": "string"
        },
        "InputPath": {
          "Type": "string"
        },
        "Pattern": {
          "Type": "object"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::StateMachine.EventBridgeRuleEvent`\n"
    },
    "AWS::Serverless::StateMachine.EventSource": {
      "Properties": {
        "Properties": {
          "Type": "CloudWatchEventEvent"
        },
        "Type": {
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::StateMachine.EventSource`\n"
    },
    "AWS::Serverless::StateMachine.FunctionSAMPT": {
      "Properties": {
        "FunctionName": {
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::StateMachine.FunctionSAMPT`\n"
    },
    "AWS::Serverless::StateMachine.IAMPolicyDocument": {
      "Properties": {
        "Statement": {
          "Type": "List",
          "ItemType": "object"
        },
        "Version": {
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::StateMachine.IAMPolicyDocument`\n"
    },
    "AWS::Serverless::StateMachine.LogDestination": {
      "Properties": {
        "CloudWatchLogsLogGroup": {
          "Type": "CloudWatchLogsLogGroup"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::StateMachine.LogDestination`\n"
    },
    "AWS::Serverless::StateMachine.LoggingConfiguration": {
      "Properties": {
        "Destinations": {
          "Type": "List",
          "ItemType": "LogDestination"
        },
        "IncludeExecutionData": {
          "Type": "boolean"
        },
        "Level": {
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::StateMachine.LoggingConfiguration`\n"
    },
    "AWS::Serverless::StateMachine.S3Location": {
      "Properties": {
        "Bucket": {
          "Type": "string"
        },
        "Key": {
          "Type": "string"
        },
        "Version": {
          "Type": "number"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::StateMachine.S3Location`\n"
    },
    "AWS::Serverless::StateMachine.SAMPolicyTemplate": {
      "Properties": {
        "LambdaInvokePolicy": {
          "Type": "FunctionSAMPT"
        },
        "StepFunctionsExecutionPolicy": {
          "Type": "StateMachineSAMPT"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::StateMachine.SAMPolicyTemplate`\n"
    },
    "AWS::Serverless::StateMachine.ScheduleEvent": {
      "Properties": {
        "Input": {
          "Type": "string"
        },
        "Schedule": {
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::StateMachine.ScheduleEvent`\n"
    },
    "AWS::Serverless::StateMachine.StateMachineSAMPT": {
      "Properties": {
        "StateMachineName": {
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::StateMachine.StateMachineSAMPT`\n"
    },
    "AWS::Serverless::StateMachine.TracingConfiguration": {
      "Properties": {
        "Enabled": {
          "Type": "boolean"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::StateMachine.TracingConfiguration`\n"
    }
  }
}