{
  "ResourceTypes": {
    "AWS::Serverless::Api": {
      "Properties": {
        "AccessLogSetting": {
          "Required": false,
          "MarkdownDocumentation": "`AccessLogSetting`\n\nCreates a collection of Amazon API Gateway resources and methods that can be invoked through\nHTTPS endpoints.\nAn AWS::Serverless::Api resource need not be\nexplicitly added to a AWS Serverless Application Definition template. A resource of this type\nis implicitly created from the union of Api events defined on [AWS::Serverless::Function](./sam-resource-function.html) resources defined in\nthe template that do not refer to an AWS::Serverless::Api resource.\nAn AWS::Serverless::Api resource should be\nused to define and document the API using OpenApi, which provides more ability to configure the\nunderlying Amazon API Gateway resources.\nWe recommend that you use AWS CloudFormation hooks or IAM policies to verify that API Gateway resources have\nauthorizers attached to them to control access to them.\nFor more information about using AWS CloudFormation hooks, see [Registering hooks](https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/registering-hook-python.html) in the *AWS CloudFormation CLI user guide* and\nthe [apigw-enforce-authorizer](https://github.com/aws-cloudformation/aws-cloudformation-samples/tree/main/hooks/python-hooks/apigw-enforce-authorizer/) GitHub repository.\nFor more information about using IAM policies, see [Require that API routes have authorization](https://docs.aws.amazon.com/apigateway/latest/developerguide/security_iam_id-based-policy-examples.html#security_iam_id-based-policy-examples-require-authorization) in the *API Gateway Developer Guide*.\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\nFor more information, see [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "AccessLogSetting"
        },
        "AlwaysDeploy": {
          "Required": false,
          "MarkdownDocumentation": "`AlwaysDeploy`\n\nCreates a collection of Amazon API Gateway resources and methods that can be invoked through\nHTTPS endpoints.\nAn AWS::Serverless::Api resource need not be\nexplicitly added to a AWS Serverless Application Definition template. A resource of this type\nis implicitly created from the union of Api events defined on [AWS::Serverless::Function](./sam-resource-function.html) resources defined in\nthe template that do not refer to an AWS::Serverless::Api resource.\nAn AWS::Serverless::Api resource should be\nused to define and document the API using OpenApi, which provides more ability to configure the\nunderlying Amazon API Gateway resources.\nWe recommend that you use AWS CloudFormation hooks or IAM policies to verify that API Gateway resources have\nauthorizers attached to them to control access to them.\nFor more information about using AWS CloudFormation hooks, see [Registering hooks](https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/registering-hook-python.html) in the *AWS CloudFormation CLI user guide* and\nthe [apigw-enforce-authorizer](https://github.com/aws-cloudformation/aws-cloudformation-samples/tree/main/hooks/python-hooks/apigw-enforce-authorizer/) GitHub repository.\nFor more information about using IAM policies, see [Require that API routes have authorization](https://docs.aws.amazon.com/apigateway/latest/developerguide/security_iam_id-based-policy-examples.html#security_iam_id-based-policy-examples-require-authorization) in the *API Gateway Developer Guide*.\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\nFor more information, see [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "boolean"
        },
        "Auth": {
          "Required": false,
          "MarkdownDocumentation": "`Auth`\n\nCreates a collection of Amazon API Gateway resources and methods that can be invoked through\nHTTPS endpoints.\nAn AWS::Serverless::Api resource need not be\nexplicitly added to a AWS Serverless Application Definition template. A resource of this type\nis implicitly created from the union of Api events defined on [AWS::Serverless::Function](./sam-resource-function.html) resources defined in\nthe template that do not refer to an AWS::Serverless::Api resource.\nAn AWS::Serverless::Api resource should be\nused to define and document the API using OpenApi, which provides more ability to configure the\nunderlying Amazon API Gateway resources.\nWe recommend that you use AWS CloudFormation hooks or IAM policies to verify that API Gateway resources have\nauthorizers attached to them to control access to them.\nFor more information about using AWS CloudFormation hooks, see [Registering hooks](https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/registering-hook-python.html) in the *AWS CloudFormation CLI user guide* and\nthe [apigw-enforce-authorizer](https://github.com/aws-cloudformation/aws-cloudformation-samples/tree/main/hooks/python-hooks/apigw-enforce-authorizer/) GitHub repository.\nFor more information about using IAM policies, see [Require that API routes have authorization](https://docs.aws.amazon.com/apigateway/latest/developerguide/security_iam_id-based-policy-examples.html#security_iam_id-based-policy-examples-require-authorization) in the *API Gateway Developer Guide*.\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\nFor more information, see [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "Auth"
        },
        "BinaryMediaTypes": {
          "Required": false,
          "MarkdownDocumentation": "`BinaryMediaTypes`\n\nCreates a collection of Amazon API Gateway resources and methods that can be invoked through\nHTTPS endpoints.\nAn AWS::Serverless::Api resource need not be\nexplicitly added to a AWS Serverless Application Definition template. A resource of this type\nis implicitly created from the union of Api events defined on [AWS::Serverless::Function](./sam-resource-function.html) resources defined in\nthe template that do not refer to an AWS::Serverless::Api resource.\nAn AWS::Serverless::Api resource should be\nused to define and document the API using OpenApi, which provides more ability to configure the\nunderlying Amazon API Gateway resources.\nWe recommend that you use AWS CloudFormation hooks or IAM policies to verify that API Gateway resources have\nauthorizers attached to them to control access to them.\nFor more information about using AWS CloudFormation hooks, see [Registering hooks](https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/registering-hook-python.html) in the *AWS CloudFormation CLI user guide* and\nthe [apigw-enforce-authorizer](https://github.com/aws-cloudformation/aws-cloudformation-samples/tree/main/hooks/python-hooks/apigw-enforce-authorizer/) GitHub repository.\nFor more information about using IAM policies, see [Require that API routes have authorization](https://docs.aws.amazon.com/apigateway/latest/developerguide/security_iam_id-based-policy-examples.html#security_iam_id-based-policy-examples-require-authorization) in the *API Gateway Developer Guide*.\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\nFor more information, see [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "List",
          "ItemType": "string"
        },
        "CacheClusterEnabled": {
          "Required": false,
          "MarkdownDocumentation": "`CacheClusterEnabled`\n\nCreates a collection of Amazon API Gateway resources and methods that can be invoked through\nHTTPS endpoints.\nAn AWS::Serverless::Api resource need not be\nexplicitly added to a AWS Serverless Application Definition template. A resource of this type\nis implicitly created from the union of Api events defined on [AWS::Serverless::Function](./sam-resource-function.html) resources defined in\nthe template that do not refer to an AWS::Serverless::Api resource.\nAn AWS::Serverless::Api resource should be\nused to define and document the API using OpenApi, which provides more ability to configure the\nunderlying Amazon API Gateway resources.\nWe recommend that you use AWS CloudFormation hooks or IAM policies to verify that API Gateway resources have\nauthorizers attached to them to control access to them.\nFor more information about using AWS CloudFormation hooks, see [Registering hooks](https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/registering-hook-python.html) in the *AWS CloudFormation CLI user guide* and\nthe [apigw-enforce-authorizer](https://github.com/aws-cloudformation/aws-cloudformation-samples/tree/main/hooks/python-hooks/apigw-enforce-authorizer/) GitHub repository.\nFor more information about using IAM policies, see [Require that API routes have authorization](https://docs.aws.amazon.com/apigateway/latest/developerguide/security_iam_id-based-policy-examples.html#security_iam_id-based-policy-examples-require-authorization) in the *API Gateway Developer Guide*.\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\nFor more information, see [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "boolean"
        },
        "CacheClusterSize": {
          "Required": false,
          "MarkdownDocumentation": "`CacheClusterSize`\n\nCreates a collection of Amazon API Gateway resources and methods that can be invoked through\nHTTPS endpoints.\nAn AWS::Serverless::Api resource need not be\nexplicitly added to a AWS Serverless Application Definition template. A resource of this type\nis implicitly created from the union of Api events defined on [AWS::Serverless::Function](./sam-resource-function.html) resources defined in\nthe template that do not refer to an AWS::Serverless::Api resource.\nAn AWS::Serverless::Api resource should be\nused to define and document the API using OpenApi, which provides more ability to configure the\nunderlying Amazon API Gateway resources.\nWe recommend that you use AWS CloudFormation hooks or IAM policies to verify that API Gateway resources have\nauthorizers attached to them to control access to them.\nFor more information about using AWS CloudFormation hooks, see [Registering hooks](https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/registering-hook-python.html) in the *AWS CloudFormation CLI user guide* and\nthe [apigw-enforce-authorizer](https://github.com/aws-cloudformation/aws-cloudformation-samples/tree/main/hooks/python-hooks/apigw-enforce-authorizer/) GitHub repository.\nFor more information about using IAM policies, see [Require that API routes have authorization](https://docs.aws.amazon.com/apigateway/latest/developerguide/security_iam_id-based-policy-examples.html#security_iam_id-based-policy-examples-require-authorization) in the *API Gateway Developer Guide*.\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\nFor more information, see [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "string"
        },
        "CanarySetting": {
          "Required": false,
          "MarkdownDocumentation": "`CanarySetting`\n\nCreates a collection of Amazon API Gateway resources and methods that can be invoked through\nHTTPS endpoints.\nAn AWS::Serverless::Api resource need not be\nexplicitly added to a AWS Serverless Application Definition template. A resource of this type\nis implicitly created from the union of Api events defined on [AWS::Serverless::Function](./sam-resource-function.html) resources defined in\nthe template that do not refer to an AWS::Serverless::Api resource.\nAn AWS::Serverless::Api resource should be\nused to define and document the API using OpenApi, which provides more ability to configure the\nunderlying Amazon API Gateway resources.\nWe recommend that you use AWS CloudFormation hooks or IAM policies to verify that API Gateway resources have\nauthorizers attached to them to control access to them.\nFor more information about using AWS CloudFormation hooks, see [Registering hooks](https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/registering-hook-python.html) in the *AWS CloudFormation CLI user guide* and\nthe [apigw-enforce-authorizer](https://github.com/aws-cloudformation/aws-cloudformation-samples/tree/main/hooks/python-hooks/apigw-enforce-authorizer/) GitHub repository.\nFor more information about using IAM policies, see [Require that API routes have authorization](https://docs.aws.amazon.com/apigateway/latest/developerguide/security_iam_id-based-policy-examples.html#security_iam_id-based-policy-examples-require-authorization) in the *API Gateway Developer Guide*.\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\nFor more information, see [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "CanarySetting"
        },
        "Cors": {
          "Required": false,
          "MarkdownDocumentation": "`Cors`\n\nCreates a collection of Amazon API Gateway resources and methods that can be invoked through\nHTTPS endpoints.\nAn AWS::Serverless::Api resource need not be\nexplicitly added to a AWS Serverless Application Definition template. A resource of this type\nis implicitly created from the union of Api events defined on [AWS::Serverless::Function](./sam-resource-function.html) resources defined in\nthe template that do not refer to an AWS::Serverless::Api resource.\nAn AWS::Serverless::Api resource should be\nused to define and document the API using OpenApi, which provides more ability to configure the\nunderlying Amazon API Gateway resources.\nWe recommend that you use AWS CloudFormation hooks or IAM policies to verify that API Gateway resources have\nauthorizers attached to them to control access to them.\nFor more information about using AWS CloudFormation hooks, see [Registering hooks](https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/registering-hook-python.html) in the *AWS CloudFormation CLI user guide* and\nthe [apigw-enforce-authorizer](https://github.com/aws-cloudformation/aws-cloudformation-samples/tree/main/hooks/python-hooks/apigw-enforce-authorizer/) GitHub repository.\nFor more information about using IAM policies, see [Require that API routes have authorization](https://docs.aws.amazon.com/apigateway/latest/developerguide/security_iam_id-based-policy-examples.html#security_iam_id-based-policy-examples-require-authorization) in the *API Gateway Developer Guide*.\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\nFor more information, see [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "CorsConfiguration"
        },
        "DefinitionBody": {
          "Required": false,
          "MarkdownDocumentation": "`DefinitionBody`\n\nCreates a collection of Amazon API Gateway resources and methods that can be invoked through\nHTTPS endpoints.\nAn AWS::Serverless::Api resource need not be\nexplicitly added to a AWS Serverless Application Definition template. A resource of this type\nis implicitly created from the union of Api events defined on [AWS::Serverless::Function](./sam-resource-function.html) resources defined in\nthe template that do not refer to an AWS::Serverless::Api resource.\nAn AWS::Serverless::Api resource should be\nused to define and document the API using OpenApi, which provides more ability to configure the\nunderlying Amazon API Gateway resources.\nWe recommend that you use AWS CloudFormation hooks or IAM policies to verify that API Gateway resources have\nauthorizers attached to them to control access to them.\nFor more information about using AWS CloudFormation hooks, see [Registering hooks](https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/registering-hook-python.html) in the *AWS CloudFormation CLI user guide* and\nthe [apigw-enforce-authorizer](https://github.com/aws-cloudformation/aws-cloudformation-samples/tree/main/hooks/python-hooks/apigw-enforce-authorizer/) GitHub repository.\nFor more information about using IAM policies, see [Require that API routes have authorization](https://docs.aws.amazon.com/apigateway/latest/developerguide/security_iam_id-based-policy-examples.html#security_iam_id-based-policy-examples-require-authorization) in the *API Gateway Developer Guide*.\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\nFor more information, see [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "object"
        },
        "DefinitionUri": {
          "Required": false,
          "MarkdownDocumentation": "`DefinitionUri`\n\nCreates a collection of Amazon API Gateway resources and methods that can be invoked through\nHTTPS endpoints.\nAn AWS::Serverless::Api resource need not be\nexplicitly added to a AWS Serverless Application Definition template. A resource of this type\nis implicitly created from the union of Api events defined on [AWS::Serverless::Function](./sam-resource-function.html) resources defined in\nthe template that do not refer to an AWS::Serverless::Api resource.\nAn AWS::Serverless::Api resource should be\nused to define and document the API using OpenApi, which provides more ability to configure the\nunderlying Amazon API Gateway resources.\nWe recommend that you use AWS CloudFormation hooks or IAM policies to verify that API Gateway resources have\nauthorizers attached to them to control access to them.\nFor more information about using AWS CloudFormation hooks, see [Registering hooks](https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/registering-hook-python.html) in the *AWS CloudFormation CLI user guide* and\nthe [apigw-enforce-authorizer](https://github.com/aws-cloudformation/aws-cloudformation-samples/tree/main/hooks/python-hooks/apigw-enforce-authorizer/) GitHub repository.\nFor more information about using IAM policies, see [Require that API routes have authorization](https://docs.aws.amazon.com/apigateway/latest/developerguide/security_iam_id-based-policy-examples.html#security_iam_id-based-policy-examples-require-authorization) in the *API Gateway Developer Guide*.\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\nFor more information, see [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "S3Location"
        },
        "Description": {
          "Required": false,
          "MarkdownDocumentation": "`Description`\n\nCreates a collection of Amazon API Gateway resources and methods that can be invoked through\nHTTPS endpoints.\nAn AWS::Serverless::Api resource need not be\nexplicitly added to a AWS Serverless Application Definition template. A resource of this type\nis implicitly created from the union of Api events defined on [AWS::Serverless::Function](./sam-resource-function.html) resources defined in\nthe template that do not refer to an AWS::Serverless::Api resource.\nAn AWS::Serverless::Api resource should be\nused to define and document the API using OpenApi, which provides more ability to configure the\nunderlying Amazon API Gateway resources.\nWe recommend that you use AWS CloudFormation hooks or IAM policies to verify that API Gateway resources have\nauthorizers attached to them to control access to them.\nFor more information about using AWS CloudFormation hooks, see [Registering hooks](https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/registering-hook-python.html) in the *AWS CloudFormation CLI user guide* and\nthe [apigw-enforce-authorizer](https://github.com/aws-cloudformation/aws-cloudformation-samples/tree/main/hooks/python-hooks/apigw-enforce-authorizer/) GitHub repository.\nFor more information about using IAM policies, see [Require that API routes have authorization](https://docs.aws.amazon.com/apigateway/latest/developerguide/security_iam_id-based-policy-examples.html#security_iam_id-based-policy-examples-require-authorization) in the *API Gateway Developer Guide*.\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\nFor more information, see [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "string"
        },
        "DisableExecuteApiEndpoint": {
          "Required": false,
          "MarkdownDocumentation": "`DisableExecuteApiEndpoint`\n\nCreates a collection of Amazon API Gateway resources and methods that can be invoked through\nHTTPS endpoints.\nAn AWS::Serverless::Api resource need not be\nexplicitly added to a AWS Serverless Application Definition template. A resource of this type\nis implicitly created from the union of Api events defined on [AWS::Serverless::Function](./sam-resource-function.html) resources defined in\nthe template that do not refer to an AWS::Serverless::Api resource.\nAn AWS::Serverless::Api resource should be\nused to define and document the API using OpenApi, which provides more ability to configure the\nunderlying Amazon API Gateway resources.\nWe recommend that you use AWS CloudFormation hooks or IAM policies to verify that API Gateway resources have\nauthorizers attached to them to control access to them.\nFor more information about using AWS CloudFormation hooks, see [Registering hooks](https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/registering-hook-python.html) in the *AWS CloudFormation CLI user guide* and\nthe [apigw-enforce-authorizer](https://github.com/aws-cloudformation/aws-cloudformation-samples/tree/main/hooks/python-hooks/apigw-enforce-authorizer/) GitHub repository.\nFor more information about using IAM policies, see [Require that API routes have authorization](https://docs.aws.amazon.com/apigateway/latest/developerguide/security_iam_id-based-policy-examples.html#security_iam_id-based-policy-examples-require-authorization) in the *API Gateway Developer Guide*.\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\nFor more information, see [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "boolean"
        },
        "Domain": {
          "Required": false,
          "MarkdownDocumentation": "`Domain`\n\nCreates a collection of Amazon API Gateway resources and methods that can be invoked through\nHTTPS endpoints.\nAn AWS::Serverless::Api resource need not be\nexplicitly added to a AWS Serverless Application Definition template. A resource of this type\nis implicitly created from the union of Api events defined on [AWS::Serverless::Function](./sam-resource-function.html) resources defined in\nthe template that do not refer to an AWS::Serverless::Api resource.\nAn AWS::Serverless::Api resource should be\nused to define and document the API using OpenApi, which provides more ability to configure the\nunderlying Amazon API Gateway resources.\nWe recommend that you use AWS CloudFormation hooks or IAM policies to verify that API Gateway resources have\nauthorizers attached to them to control access to them.\nFor more information about using AWS CloudFormation hooks, see [Registering hooks](https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/registering-hook-python.html) in the *AWS CloudFormation CLI user guide* and\nthe [apigw-enforce-authorizer](https://github.com/aws-cloudformation/aws-cloudformation-samples/tree/main/hooks/python-hooks/apigw-enforce-authorizer/) GitHub repository.\nFor more information about using IAM policies, see [Require that API routes have authorization](https://docs.aws.amazon.com/apigateway/latest/developerguide/security_iam_id-based-policy-examples.html#security_iam_id-based-policy-examples-require-authorization) in the *API Gateway Developer Guide*.\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\nFor more information, see [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "DomainConfiguration"
        },
        "EndpointConfiguration": {
          "Required": false,
          "MarkdownDocumentation": "`EndpointConfiguration`\n\nCreates a collection of Amazon API Gateway resources and methods that can be invoked through\nHTTPS endpoints.\nAn AWS::Serverless::Api resource need not be\nexplicitly added to a AWS Serverless Application Definition template. A resource of this type\nis implicitly created from the union of Api events defined on [AWS::Serverless::Function](./sam-resource-function.html) resources defined in\nthe template that do not refer to an AWS::Serverless::Api resource.\nAn AWS::Serverless::Api resource should be\nused to define and document the API using OpenApi, which provides more ability to configure the\nunderlying Amazon API Gateway resources.\nWe recommend that you use AWS CloudFormation hooks or IAM policies to verify that API Gateway resources have\nauthorizers attached to them to control access to them.\nFor more information about using AWS CloudFormation hooks, see [Registering hooks](https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/registering-hook-python.html) in the *AWS CloudFormation CLI user guide* and\nthe [apigw-enforce-authorizer](https://github.com/aws-cloudformation/aws-cloudformation-samples/tree/main/hooks/python-hooks/apigw-enforce-authorizer/) GitHub repository.\nFor more information about using IAM policies, see [Require that API routes have authorization](https://docs.aws.amazon.com/apigateway/latest/developerguide/security_iam_id-based-policy-examples.html#security_iam_id-based-policy-examples-require-authorization) in the *API Gateway Developer Guide*.\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\nFor more information, see [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "EndpointConfiguration"
        },
        "GatewayResponses": {
          "additionalProperties": true,
          "patternProperties": {
            "^[a-zA-Z0-9]+$": {
              "type": "string"
            }
          },
          "Required": false,
          "MarkdownDocumentation": "`GatewayResponses`\n\nCreates a collection of Amazon API Gateway resources and methods that can be invoked through\nHTTPS endpoints.\nAn AWS::Serverless::Api resource need not be\nexplicitly added to a AWS Serverless Application Definition template. A resource of this type\nis implicitly created from the union of Api events defined on [AWS::Serverless::Function](./sam-resource-function.html) resources defined in\nthe template that do not refer to an AWS::Serverless::Api resource.\nAn AWS::Serverless::Api resource should be\nused to define and document the API using OpenApi, which provides more ability to configure the\nunderlying Amazon API Gateway resources.\nWe recommend that you use AWS CloudFormation hooks or IAM policies to verify that API Gateway resources have\nauthorizers attached to them to control access to them.\nFor more information about using AWS CloudFormation hooks, see [Registering hooks](https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/registering-hook-python.html) in the *AWS CloudFormation CLI user guide* and\nthe [apigw-enforce-authorizer](https://github.com/aws-cloudformation/aws-cloudformation-samples/tree/main/hooks/python-hooks/apigw-enforce-authorizer/) GitHub repository.\nFor more information about using IAM policies, see [Require that API routes have authorization](https://docs.aws.amazon.com/apigateway/latest/developerguide/security_iam_id-based-policy-examples.html#security_iam_id-based-policy-examples-require-authorization) in the *API Gateway Developer Guide*.\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\nFor more information, see [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "object"
        },
        "MethodSettings": {
          "Required": false,
          "MarkdownDocumentation": "`MethodSettings`\n\nCreates a collection of Amazon API Gateway resources and methods that can be invoked through\nHTTPS endpoints.\nAn AWS::Serverless::Api resource need not be\nexplicitly added to a AWS Serverless Application Definition template. A resource of this type\nis implicitly created from the union of Api events defined on [AWS::Serverless::Function](./sam-resource-function.html) resources defined in\nthe template that do not refer to an AWS::Serverless::Api resource.\nAn AWS::Serverless::Api resource should be\nused to define and document the API using OpenApi, which provides more ability to configure the\nunderlying Amazon API Gateway resources.\nWe recommend that you use AWS CloudFormation hooks or IAM policies to verify that API Gateway resources have\nauthorizers attached to them to control access to them.\nFor more information about using AWS CloudFormation hooks, see [Registering hooks](https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/registering-hook-python.html) in the *AWS CloudFormation CLI user guide* and\nthe [apigw-enforce-authorizer](https://github.com/aws-cloudformation/aws-cloudformation-samples/tree/main/hooks/python-hooks/apigw-enforce-authorizer/) GitHub repository.\nFor more information about using IAM policies, see [Require that API routes have authorization](https://docs.aws.amazon.com/apigateway/latest/developerguide/security_iam_id-based-policy-examples.html#security_iam_id-based-policy-examples-require-authorization) in the *API Gateway Developer Guide*.\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\nFor more information, see [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "List",
          "ItemType": "object"
        },
        "MinimumCompressionSize": {
          "Required": false,
          "MarkdownDocumentation": "`MinimumCompressionSize`\n\nCreates a collection of Amazon API Gateway resources and methods that can be invoked through\nHTTPS endpoints.\nAn AWS::Serverless::Api resource need not be\nexplicitly added to a AWS Serverless Application Definition template. A resource of this type\nis implicitly created from the union of Api events defined on [AWS::Serverless::Function](./sam-resource-function.html) resources defined in\nthe template that do not refer to an AWS::Serverless::Api resource.\nAn AWS::Serverless::Api resource should be\nused to define and document the API using OpenApi, which provides more ability to configure the\nunderlying Amazon API Gateway resources.\nWe recommend that you use AWS CloudFormation hooks or IAM policies to verify that API Gateway resources have\nauthorizers attached to them to control access to them.\nFor more information about using AWS CloudFormation hooks, see [Registering hooks](https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/registering-hook-python.html) in the *AWS CloudFormation CLI user guide* and\nthe [apigw-enforce-authorizer](https://github.com/aws-cloudformation/aws-cloudformation-samples/tree/main/hooks/python-hooks/apigw-enforce-authorizer/) GitHub repository.\nFor more information about using IAM policies, see [Require that API routes have authorization](https://docs.aws.amazon.com/apigateway/latest/developerguide/security_iam_id-based-policy-examples.html#security_iam_id-based-policy-examples-require-authorization) in the *API Gateway Developer Guide*.\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\nFor more information, see [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "number"
        },
        "Models": {
          "additionalProperties": true,
          "patternProperties": {
            "^[a-zA-Z0-9]+$": {
              "type": "object"
            }
          },
          "Required": false,
          "MarkdownDocumentation": "`Models`\n\nCreates a collection of Amazon API Gateway resources and methods that can be invoked through\nHTTPS endpoints.\nAn AWS::Serverless::Api resource need not be\nexplicitly added to a AWS Serverless Application Definition template. A resource of this type\nis implicitly created from the union of Api events defined on [AWS::Serverless::Function](./sam-resource-function.html) resources defined in\nthe template that do not refer to an AWS::Serverless::Api resource.\nAn AWS::Serverless::Api resource should be\nused to define and document the API using OpenApi, which provides more ability to configure the\nunderlying Amazon API Gateway resources.\nWe recommend that you use AWS CloudFormation hooks or IAM policies to verify that API Gateway resources have\nauthorizers attached to them to control access to them.\nFor more information about using AWS CloudFormation hooks, see [Registering hooks](https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/registering-hook-python.html) in the *AWS CloudFormation CLI user guide* and\nthe [apigw-enforce-authorizer](https://github.com/aws-cloudformation/aws-cloudformation-samples/tree/main/hooks/python-hooks/apigw-enforce-authorizer/) GitHub repository.\nFor more information about using IAM policies, see [Require that API routes have authorization](https://docs.aws.amazon.com/apigateway/latest/developerguide/security_iam_id-based-policy-examples.html#security_iam_id-based-policy-examples-require-authorization) in the *API Gateway Developer Guide*.\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\nFor more information, see [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "object"
        },
        "Name": {
          "Required": false,
          "MarkdownDocumentation": "`Name`\n\nCreates a collection of Amazon API Gateway resources and methods that can be invoked through\nHTTPS endpoints.\nAn AWS::Serverless::Api resource need not be\nexplicitly added to a AWS Serverless Application Definition template. A resource of this type\nis implicitly created from the union of Api events defined on [AWS::Serverless::Function](./sam-resource-function.html) resources defined in\nthe template that do not refer to an AWS::Serverless::Api resource.\nAn AWS::Serverless::Api resource should be\nused to define and document the API using OpenApi, which provides more ability to configure the\nunderlying Amazon API Gateway resources.\nWe recommend that you use AWS CloudFormation hooks or IAM policies to verify that API Gateway resources have\nauthorizers attached to them to control access to them.\nFor more information about using AWS CloudFormation hooks, see [Registering hooks](https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/registering-hook-python.html) in the *AWS CloudFormation CLI user guide* and\nthe [apigw-enforce-authorizer](https://github.com/aws-cloudformation/aws-cloudformation-samples/tree/main/hooks/python-hooks/apigw-enforce-authorizer/) GitHub repository.\nFor more information about using IAM policies, see [Require that API routes have authorization](https://docs.aws.amazon.com/apigateway/latest/developerguide/security_iam_id-based-policy-examples.html#security_iam_id-based-policy-examples-require-authorization) in the *API Gateway Developer Guide*.\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\nFor more information, see [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "string"
        },
        "OpenApiVersion": {
          "Required": false,
          "MarkdownDocumentation": "`OpenApiVersion`\n\nCreates a collection of Amazon API Gateway resources and methods that can be invoked through\nHTTPS endpoints.\nAn AWS::Serverless::Api resource need not be\nexplicitly added to a AWS Serverless Application Definition template. A resource of this type\nis implicitly created from the union of Api events defined on [AWS::Serverless::Function](./sam-resource-function.html) resources defined in\nthe template that do not refer to an AWS::Serverless::Api resource.\nAn AWS::Serverless::Api resource should be\nused to define and document the API using OpenApi, which provides more ability to configure the\nunderlying Amazon API Gateway resources.\nWe recommend that you use AWS CloudFormation hooks or IAM policies to verify that API Gateway resources have\nauthorizers attached to them to control access to them.\nFor more information about using AWS CloudFormation hooks, see [Registering hooks](https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/registering-hook-python.html) in the *AWS CloudFormation CLI user guide* and\nthe [apigw-enforce-authorizer](https://github.com/aws-cloudformation/aws-cloudformation-samples/tree/main/hooks/python-hooks/apigw-enforce-authorizer/) GitHub repository.\nFor more information about using IAM policies, see [Require that API routes have authorization](https://docs.aws.amazon.com/apigateway/latest/developerguide/security_iam_id-based-policy-examples.html#security_iam_id-based-policy-examples-require-authorization) in the *API Gateway Developer Guide*.\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\nFor more information, see [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "string"
        },
        "StageName": {
          "Required": true,
          "MarkdownDocumentation": "`StageName`\n\nCreates a collection of Amazon API Gateway resources and methods that can be invoked through\nHTTPS endpoints.\nAn AWS::Serverless::Api resource need not be\nexplicitly added to a AWS Serverless Application Definition template. A resource of this type\nis implicitly created from the union of Api events defined on [AWS::Serverless::Function](./sam-resource-function.html) resources defined in\nthe template that do not refer to an AWS::Serverless::Api resource.\nAn AWS::Serverless::Api resource should be\nused to define and document the API using OpenApi, which provides more ability to configure the\nunderlying Amazon API Gateway resources.\nWe recommend that you use AWS CloudFormation hooks or IAM policies to verify that API Gateway resources have\nauthorizers attached to them to control access to them.\nFor more information about using AWS CloudFormation hooks, see [Registering hooks](https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/registering-hook-python.html) in the *AWS CloudFormation CLI user guide* and\nthe [apigw-enforce-authorizer](https://github.com/aws-cloudformation/aws-cloudformation-samples/tree/main/hooks/python-hooks/apigw-enforce-authorizer/) GitHub repository.\nFor more information about using IAM policies, see [Require that API routes have authorization](https://docs.aws.amazon.com/apigateway/latest/developerguide/security_iam_id-based-policy-examples.html#security_iam_id-based-policy-examples-require-authorization) in the *API Gateway Developer Guide*.\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\nFor more information, see [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "string"
        },
        "Tags": {
          "additionalProperties": true,
          "patternProperties": {
            "^[a-zA-Z0-9]+$": {
              "type": "string"
            }
          },
          "Required": false,
          "MarkdownDocumentation": "`Tags`\n\nCreates a collection of Amazon API Gateway resources and methods that can be invoked through\nHTTPS endpoints.\nAn AWS::Serverless::Api resource need not be\nexplicitly added to a AWS Serverless Application Definition template. A resource of this type\nis implicitly created from the union of Api events defined on [AWS::Serverless::Function](./sam-resource-function.html) resources defined in\nthe template that do not refer to an AWS::Serverless::Api resource.\nAn AWS::Serverless::Api resource should be\nused to define and document the API using OpenApi, which provides more ability to configure the\nunderlying Amazon API Gateway resources.\nWe recommend that you use AWS CloudFormation hooks or IAM policies to verify that API Gateway resources have\nauthorizers attached to them to control access to them.\nFor more information about using AWS CloudFormation hooks, see [Registering hooks](https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/registering-hook-python.html) in the *AWS CloudFormation CLI user guide* and\nthe [apigw-enforce-authorizer](https://github.com/aws-cloudformation/aws-cloudformation-samples/tree/main/hooks/python-hooks/apigw-enforce-authorizer/) GitHub repository.\nFor more information about using IAM policies, see [Require that API routes have authorization](https://docs.aws.amazon.com/apigateway/latest/developerguide/security_iam_id-based-policy-examples.html#security_iam_id-based-policy-examples-require-authorization) in the *API Gateway Developer Guide*.\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\nFor more information, see [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "object"
        },
        "TracingEnabled": {
          "Required": false,
          "MarkdownDocumentation": "`TracingEnabled`\n\nCreates a collection of Amazon API Gateway resources and methods that can be invoked through\nHTTPS endpoints.\nAn AWS::Serverless::Api resource need not be\nexplicitly added to a AWS Serverless Application Definition template. A resource of this type\nis implicitly created from the union of Api events defined on [AWS::Serverless::Function](./sam-resource-function.html) resources defined in\nthe template that do not refer to an AWS::Serverless::Api resource.\nAn AWS::Serverless::Api resource should be\nused to define and document the API using OpenApi, which provides more ability to configure the\nunderlying Amazon API Gateway resources.\nWe recommend that you use AWS CloudFormation hooks or IAM policies to verify that API Gateway resources have\nauthorizers attached to them to control access to them.\nFor more information about using AWS CloudFormation hooks, see [Registering hooks](https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/registering-hook-python.html) in the *AWS CloudFormation CLI user guide* and\nthe [apigw-enforce-authorizer](https://github.com/aws-cloudformation/aws-cloudformation-samples/tree/main/hooks/python-hooks/apigw-enforce-authorizer/) GitHub repository.\nFor more information about using IAM policies, see [Require that API routes have authorization](https://docs.aws.amazon.com/apigateway/latest/developerguide/security_iam_id-based-policy-examples.html#security_iam_id-based-policy-examples-require-authorization) in the *API Gateway Developer Guide*.\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\nFor more information, see [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "boolean"
        },
        "Variables": {
          "additionalProperties": true,
          "patternProperties": {
            "^[a-zA-Z0-9]+$": {
              "type": "string"
            }
          },
          "Required": false,
          "MarkdownDocumentation": "`Variables`\n\nCreates a collection of Amazon API Gateway resources and methods that can be invoked through\nHTTPS endpoints.\nAn AWS::Serverless::Api resource need not be\nexplicitly added to a AWS Serverless Application Definition template. A resource of this type\nis implicitly created from the union of Api events defined on [AWS::Serverless::Function](./sam-resource-function.html) resources defined in\nthe template that do not refer to an AWS::Serverless::Api resource.\nAn AWS::Serverless::Api resource should be\nused to define and document the API using OpenApi, which provides more ability to configure the\nunderlying Amazon API Gateway resources.\nWe recommend that you use AWS CloudFormation hooks or IAM policies to verify that API Gateway resources have\nauthorizers attached to them to control access to them.\nFor more information about using AWS CloudFormation hooks, see [Registering hooks](https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/registering-hook-python.html) in the *AWS CloudFormation CLI user guide* and\nthe [apigw-enforce-authorizer](https://github.com/aws-cloudformation/aws-cloudformation-samples/tree/main/hooks/python-hooks/apigw-enforce-authorizer/) GitHub repository.\nFor more information about using IAM policies, see [Require that API routes have authorization](https://docs.aws.amazon.com/apigateway/latest/developerguide/security_iam_id-based-policy-examples.html#security_iam_id-based-policy-examples-require-authorization) in the *API Gateway Developer Guide*.\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\nFor more information, see [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "object"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Api`\n\nCreates a collection of Amazon API Gateway resources and methods that can be invoked through\nHTTPS endpoints.\nAn AWS::Serverless::Api resource need not be\nexplicitly added to a AWS Serverless Application Definition template. A resource of this type\nis implicitly created from the union of Api events defined on [AWS::Serverless::Function](./sam-resource-function.html) resources defined in\nthe template that do not refer to an AWS::Serverless::Api resource.\nAn AWS::Serverless::Api resource should be\nused to define and document the API using OpenApi, which provides more ability to configure the\nunderlying Amazon API Gateway resources.\nWe recommend that you use AWS CloudFormation hooks or IAM policies to verify that API Gateway resources have\nauthorizers attached to them to control access to them.\nFor more information about using AWS CloudFormation hooks, see [Registering hooks](https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/registering-hook-python.html) in the *AWS CloudFormation CLI user guide* and\nthe [apigw-enforce-authorizer](https://github.com/aws-cloudformation/aws-cloudformation-samples/tree/main/hooks/python-hooks/apigw-enforce-authorizer/) GitHub repository.\nFor more information about using IAM policies, see [Require that API routes have authorization](https://docs.aws.amazon.com/apigateway/latest/developerguide/security_iam_id-based-policy-examples.html#security_iam_id-based-policy-examples-require-authorization) in the *API Gateway Developer Guide*.\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\nFor more information, see [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n"
    },
    "AWS::Serverless::Application": {
      "Properties": {
        "Location": {
          "Required": true,
          "MarkdownDocumentation": "`Location`\n\nEmbeds a serverless application from the [AWS Serverless Application Repository](https://serverlessrepo.aws.amazon.com/applications) or from an Amazon S3 bucket as a nested application. Nested applications are deployed as nested [AWS::CloudFormation::Stack](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudformation-stack.html) resources, which can contain multiple other resources including other AWS::Serverless::Application resources.\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources. For more information,\nsee [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "ApplicationLocation"
        },
        "NotificationArns": {
          "Required": false,
          "MarkdownDocumentation": "`NotificationArns`\n\nEmbeds a serverless application from the [AWS Serverless Application Repository](https://serverlessrepo.aws.amazon.com/applications) or from an Amazon S3 bucket as a nested application. Nested applications are deployed as nested [AWS::CloudFormation::Stack](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudformation-stack.html) resources, which can contain multiple other resources including other AWS::Serverless::Application resources.\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources. For more information,\nsee [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "List",
          "ItemType": "string"
        },
        "Parameters": {
          "additionalProperties": true,
          "patternProperties": {
            "^[a-zA-Z0-9]+$": {
              "type": "string"
            }
          },
          "Required": false,
          "MarkdownDocumentation": "`Parameters`\n\nEmbeds a serverless application from the [AWS Serverless Application Repository](https://serverlessrepo.aws.amazon.com/applications) or from an Amazon S3 bucket as a nested application. Nested applications are deployed as nested [AWS::CloudFormation::Stack](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudformation-stack.html) resources, which can contain multiple other resources including other AWS::Serverless::Application resources.\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources. For more information,\nsee [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "object"
        },
        "Tags": {
          "additionalProperties": true,
          "patternProperties": {
            "^[a-zA-Z0-9]+$": {
              "type": "string"
            }
          },
          "Required": false,
          "MarkdownDocumentation": "`Tags`\n\nEmbeds a serverless application from the [AWS Serverless Application Repository](https://serverlessrepo.aws.amazon.com/applications) or from an Amazon S3 bucket as a nested application. Nested applications are deployed as nested [AWS::CloudFormation::Stack](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudformation-stack.html) resources, which can contain multiple other resources including other AWS::Serverless::Application resources.\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources. For more information,\nsee [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "object"
        },
        "TimeoutInMinutes": {
          "Required": false,
          "MarkdownDocumentation": "`TimeoutInMinutes`\n\nEmbeds a serverless application from the [AWS Serverless Application Repository](https://serverlessrepo.aws.amazon.com/applications) or from an Amazon S3 bucket as a nested application. Nested applications are deployed as nested [AWS::CloudFormation::Stack](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudformation-stack.html) resources, which can contain multiple other resources including other AWS::Serverless::Application resources.\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources. For more information,\nsee [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "number"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Application`\n\nEmbeds a serverless application from the [AWS Serverless Application Repository](https://serverlessrepo.aws.amazon.com/applications) or from an Amazon S3 bucket as a nested application. Nested applications are deployed as nested [AWS::CloudFormation::Stack](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudformation-stack.html) resources, which can contain multiple other resources including other AWS::Serverless::Application resources.\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources. For more information,\nsee [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n"
    },
    "AWS::Serverless::Function": {
      "Properties": {
        "Architectures": {
          "Required": false,
          "MarkdownDocumentation": "`Architectures`\n\nCreates an AWS Lambda function, an AWS Identity and Access Management (IAM) execution role, and event source\nmappings that trigger the function.\nThe AWS::Serverless::Function resource\nalso supports the `Metadata` resource attribute, so you can instruct AWS SAM to build\ncustom runtimes that your application requires. For more information about building custom\nruntimes, see [Building Lambda functions with custom runtimes in AWS SAM](./building-custom-runtimes.html).\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\nFor more information, see [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "List",
          "ItemType": "string"
        },
        "AssumeRolePolicyDocument": {
          "Required": false,
          "MarkdownDocumentation": "`AssumeRolePolicyDocument`\n\nCreates an AWS Lambda function, an AWS Identity and Access Management (IAM) execution role, and event source\nmappings that trigger the function.\nThe AWS::Serverless::Function resource\nalso supports the `Metadata` resource attribute, so you can instruct AWS SAM to build\ncustom runtimes that your application requires. For more information about building custom\nruntimes, see [Building Lambda functions with custom runtimes in AWS SAM](./building-custom-runtimes.html).\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\nFor more information, see [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "object"
        },
        "AutoPublishAlias": {
          "Required": false,
          "MarkdownDocumentation": "`AutoPublishAlias`\n\nCreates an AWS Lambda function, an AWS Identity and Access Management (IAM) execution role, and event source\nmappings that trigger the function.\nThe AWS::Serverless::Function resource\nalso supports the `Metadata` resource attribute, so you can instruct AWS SAM to build\ncustom runtimes that your application requires. For more information about building custom\nruntimes, see [Building Lambda functions with custom runtimes in AWS SAM](./building-custom-runtimes.html).\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\nFor more information, see [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "string"
        },
        "AutoPublishCodeSha256": {
          "Required": false,
          "MarkdownDocumentation": "`AutoPublishCodeSha256`\n\nCreates an AWS Lambda function, an AWS Identity and Access Management (IAM) execution role, and event source\nmappings that trigger the function.\nThe AWS::Serverless::Function resource\nalso supports the `Metadata` resource attribute, so you can instruct AWS SAM to build\ncustom runtimes that your application requires. For more information about building custom\nruntimes, see [Building Lambda functions with custom runtimes in AWS SAM](./building-custom-runtimes.html).\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\nFor more information, see [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "string"
        },
        "CodeSigningConfigArn": {
          "Required": false,
          "MarkdownDocumentation": "`CodeSigningConfigArn`\n\nCreates an AWS Lambda function, an AWS Identity and Access Management (IAM) execution role, and event source\nmappings that trigger the function.\nThe AWS::Serverless::Function resource\nalso supports the `Metadata` resource attribute, so you can instruct AWS SAM to build\ncustom runtimes that your application requires. For more information about building custom\nruntimes, see [Building Lambda functions with custom runtimes in AWS SAM](./building-custom-runtimes.html).\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\nFor more information, see [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "string"
        },
        "CodeUri": {
          "Required": false,
          "MarkdownDocumentation": "`CodeUri`\n\nCreates an AWS Lambda function, an AWS Identity and Access Management (IAM) execution role, and event source\nmappings that trigger the function.\nThe AWS::Serverless::Function resource\nalso supports the `Metadata` resource attribute, so you can instruct AWS SAM to build\ncustom runtimes that your application requires. For more information about building custom\nruntimes, see [Building Lambda functions with custom runtimes in AWS SAM](./building-custom-runtimes.html).\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\nFor more information, see [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "S3Location"
        },
        "DeadLetterQueue": {
          "Required": false,
          "MarkdownDocumentation": "`DeadLetterQueue`\n\nCreates an AWS Lambda function, an AWS Identity and Access Management (IAM) execution role, and event source\nmappings that trigger the function.\nThe AWS::Serverless::Function resource\nalso supports the `Metadata` resource attribute, so you can instruct AWS SAM to build\ncustom runtimes that your application requires. For more information about building custom\nruntimes, see [Building Lambda functions with custom runtimes in AWS SAM](./building-custom-runtimes.html).\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\nFor more information, see [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "DeadLetterQueue"
        },
        "DeploymentPreference": {
          "Required": false,
          "MarkdownDocumentation": "`DeploymentPreference`\n\nCreates an AWS Lambda function, an AWS Identity and Access Management (IAM) execution role, and event source\nmappings that trigger the function.\nThe AWS::Serverless::Function resource\nalso supports the `Metadata` resource attribute, so you can instruct AWS SAM to build\ncustom runtimes that your application requires. For more information about building custom\nruntimes, see [Building Lambda functions with custom runtimes in AWS SAM](./building-custom-runtimes.html).\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\nFor more information, see [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "DeploymentPreference"
        },
        "Description": {
          "Required": false,
          "MarkdownDocumentation": "`Description`\n\nCreates an AWS Lambda function, an AWS Identity and Access Management (IAM) execution role, and event source\nmappings that trigger the function.\nThe AWS::Serverless::Function resource\nalso supports the `Metadata` resource attribute, so you can instruct AWS SAM to build\ncustom runtimes that your application requires. For more information about building custom\nruntimes, see [Building Lambda functions with custom runtimes in AWS SAM](./building-custom-runtimes.html).\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\nFor more information, see [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "string"
        },
        "Environment": {
          "Required": false,
          "MarkdownDocumentation": "`Environment`\n\nCreates an AWS Lambda function, an AWS Identity and Access Management (IAM) execution role, and event source\nmappings that trigger the function.\nThe AWS::Serverless::Function resource\nalso supports the `Metadata` resource attribute, so you can instruct AWS SAM to build\ncustom runtimes that your application requires. For more information about building custom\nruntimes, see [Building Lambda functions with custom runtimes in AWS SAM](./building-custom-runtimes.html).\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\nFor more information, see [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "FunctionEnvironment"
        },
        "EphemeralStorage": {
          "Required": false,
          "MarkdownDocumentation": "`EphemeralStorage`\n\nCreates an AWS Lambda function, an AWS Identity and Access Management (IAM) execution role, and event source\nmappings that trigger the function.\nThe AWS::Serverless::Function resource\nalso supports the `Metadata` resource attribute, so you can instruct AWS SAM to build\ncustom runtimes that your application requires. For more information about building custom\nruntimes, see [Building Lambda functions with custom runtimes in AWS SAM](./building-custom-runtimes.html).\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\nFor more information, see [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "EphemeralStorage"
        },
        "EventInvokeConfig": {
          "Required": false,
          "MarkdownDocumentation": "`EventInvokeConfig`\n\nCreates an AWS Lambda function, an AWS Identity and Access Management (IAM) execution role, and event source\nmappings that trigger the function.\nThe AWS::Serverless::Function resource\nalso supports the `Metadata` resource attribute, so you can instruct AWS SAM to build\ncustom runtimes that your application requires. For more information about building custom\nruntimes, see [Building Lambda functions with custom runtimes in AWS SAM](./building-custom-runtimes.html).\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\nFor more information, see [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "EventInvokeConfig"
        },
        "Events": {
          "additionalProperties": false,
          "patternProperties": {
            "^[a-zA-Z0-9]+$": {
              "$ref": "#/definitions/AWS::Serverless::Function.EventSource"
            }
          },
          "Required": false,
          "MarkdownDocumentation": "`Events`\n\nCreates an AWS Lambda function, an AWS Identity and Access Management (IAM) execution role, and event source\nmappings that trigger the function.\nThe AWS::Serverless::Function resource\nalso supports the `Metadata` resource attribute, so you can instruct AWS SAM to build\ncustom runtimes that your application requires. For more information about building custom\nruntimes, see [Building Lambda functions with custom runtimes in AWS SAM](./building-custom-runtimes.html).\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\nFor more information, see [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "object"
        },
        "FileSystemConfigs": {
          "Required": false,
          "MarkdownDocumentation": "`FileSystemConfigs`\n\nCreates an AWS Lambda function, an AWS Identity and Access Management (IAM) execution role, and event source\nmappings that trigger the function.\nThe AWS::Serverless::Function resource\nalso supports the `Metadata` resource attribute, so you can instruct AWS SAM to build\ncustom runtimes that your application requires. For more information about building custom\nruntimes, see [Building Lambda functions with custom runtimes in AWS SAM](./building-custom-runtimes.html).\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\nFor more information, see [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "List",
          "ItemType": "FileSystemConfig"
        },
        "FunctionName": {
          "Required": false,
          "MarkdownDocumentation": "`FunctionName`\n\nCreates an AWS Lambda function, an AWS Identity and Access Management (IAM) execution role, and event source\nmappings that trigger the function.\nThe AWS::Serverless::Function resource\nalso supports the `Metadata` resource attribute, so you can instruct AWS SAM to build\ncustom runtimes that your application requires. For more information about building custom\nruntimes, see [Building Lambda functions with custom runtimes in AWS SAM](./building-custom-runtimes.html).\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\nFor more information, see [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "string"
        },
        "FunctionUrlConfig": {
          "Required": false,
          "MarkdownDocumentation": "`FunctionUrlConfig`\n\nCreates an AWS Lambda function, an AWS Identity and Access Management (IAM) execution role, and event source\nmappings that trigger the function.\nThe AWS::Serverless::Function resource\nalso supports the `Metadata` resource attribute, so you can instruct AWS SAM to build\ncustom runtimes that your application requires. For more information about building custom\nruntimes, see [Building Lambda functions with custom runtimes in AWS SAM](./building-custom-runtimes.html).\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\nFor more information, see [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "FunctionUrlConfig"
        },
        "Handler": {
          "Required": false,
          "MarkdownDocumentation": "`Handler`\n\nCreates an AWS Lambda function, an AWS Identity and Access Management (IAM) execution role, and event source\nmappings that trigger the function.\nThe AWS::Serverless::Function resource\nalso supports the `Metadata` resource attribute, so you can instruct AWS SAM to build\ncustom runtimes that your application requires. For more information about building custom\nruntimes, see [Building Lambda functions with custom runtimes in AWS SAM](./building-custom-runtimes.html).\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\nFor more information, see [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "string"
        },
        "ImageConfig": {
          "Required": false,
          "MarkdownDocumentation": "`ImageConfig`\n\nCreates an AWS Lambda function, an AWS Identity and Access Management (IAM) execution role, and event source\nmappings that trigger the function.\nThe AWS::Serverless::Function resource\nalso supports the `Metadata` resource attribute, so you can instruct AWS SAM to build\ncustom runtimes that your application requires. For more information about building custom\nruntimes, see [Building Lambda functions with custom runtimes in AWS SAM](./building-custom-runtimes.html).\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\nFor more information, see [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "ImageConfig"
        },
        "ImageUri": {
          "Required": false,
          "MarkdownDocumentation": "`ImageUri`\n\nCreates an AWS Lambda function, an AWS Identity and Access Management (IAM) execution role, and event source\nmappings that trigger the function.\nThe AWS::Serverless::Function resource\nalso supports the `Metadata` resource attribute, so you can instruct AWS SAM to build\ncustom runtimes that your application requires. For more information about building custom\nruntimes, see [Building Lambda functions with custom runtimes in AWS SAM](./building-custom-runtimes.html).\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\nFor more information, see [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "string"
        },
        "InlineCode": {
          "Required": false,
          "MarkdownDocumentation": "`InlineCode`\n\nCreates an AWS Lambda function, an AWS Identity and Access Management (IAM) execution role, and event source\nmappings that trigger the function.\nThe AWS::Serverless::Function resource\nalso supports the `Metadata` resource attribute, so you can instruct AWS SAM to build\ncustom runtimes that your application requires. For more information about building custom\nruntimes, see [Building Lambda functions with custom runtimes in AWS SAM](./building-custom-runtimes.html).\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\nFor more information, see [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "string"
        },
        "KmsKeyArn": {
          "Required": false,
          "MarkdownDocumentation": "`KmsKeyArn`\n\nCreates an AWS Lambda function, an AWS Identity and Access Management (IAM) execution role, and event source\nmappings that trigger the function.\nThe AWS::Serverless::Function resource\nalso supports the `Metadata` resource attribute, so you can instruct AWS SAM to build\ncustom runtimes that your application requires. For more information about building custom\nruntimes, see [Building Lambda functions with custom runtimes in AWS SAM](./building-custom-runtimes.html).\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\nFor more information, see [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "string"
        },
        "Layers": {
          "Required": false,
          "MarkdownDocumentation": "`Layers`\n\nCreates an AWS Lambda function, an AWS Identity and Access Management (IAM) execution role, and event source\nmappings that trigger the function.\nThe AWS::Serverless::Function resource\nalso supports the `Metadata` resource attribute, so you can instruct AWS SAM to build\ncustom runtimes that your application requires. For more information about building custom\nruntimes, see [Building Lambda functions with custom runtimes in AWS SAM](./building-custom-runtimes.html).\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\nFor more information, see [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "List",
          "ItemType": "string"
        },
        "MemorySize": {
          "Required": false,
          "MarkdownDocumentation": "`MemorySize`\n\nCreates an AWS Lambda function, an AWS Identity and Access Management (IAM) execution role, and event source\nmappings that trigger the function.\nThe AWS::Serverless::Function resource\nalso supports the `Metadata` resource attribute, so you can instruct AWS SAM to build\ncustom runtimes that your application requires. For more information about building custom\nruntimes, see [Building Lambda functions with custom runtimes in AWS SAM](./building-custom-runtimes.html).\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\nFor more information, see [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "number"
        },
        "PackageType": {
          "Required": false,
          "MarkdownDocumentation": "`PackageType`\n\nCreates an AWS Lambda function, an AWS Identity and Access Management (IAM) execution role, and event source\nmappings that trigger the function.\nThe AWS::Serverless::Function resource\nalso supports the `Metadata` resource attribute, so you can instruct AWS SAM to build\ncustom runtimes that your application requires. For more information about building custom\nruntimes, see [Building Lambda functions with custom runtimes in AWS SAM](./building-custom-runtimes.html).\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\nFor more information, see [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "string"
        },
        "PermissionsBoundary": {
          "Required": false,
          "MarkdownDocumentation": "`PermissionsBoundary`\n\nCreates an AWS Lambda function, an AWS Identity and Access Management (IAM) execution role, and event source\nmappings that trigger the function.\nThe AWS::Serverless::Function resource\nalso supports the `Metadata` resource attribute, so you can instruct AWS SAM to build\ncustom runtimes that your application requires. For more information about building custom\nruntimes, see [Building Lambda functions with custom runtimes in AWS SAM](./building-custom-runtimes.html).\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\nFor more information, see [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "string"
        },
        "Policies": {
          "Required": false,
          "MarkdownDocumentation": "`Policies`\n\nCreates an AWS Lambda function, an AWS Identity and Access Management (IAM) execution role, and event source\nmappings that trigger the function.\nThe AWS::Serverless::Function resource\nalso supports the `Metadata` resource attribute, so you can instruct AWS SAM to build\ncustom runtimes that your application requires. For more information about building custom\nruntimes, see [Building Lambda functions with custom runtimes in AWS SAM](./building-custom-runtimes.html).\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\nFor more information, see [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "IAMPolicyDocument"
        },
        "ProvisionedConcurrencyConfig": {
          "Required": false,
          "MarkdownDocumentation": "`ProvisionedConcurrencyConfig`\n\nCreates an AWS Lambda function, an AWS Identity and Access Management (IAM) execution role, and event source\nmappings that trigger the function.\nThe AWS::Serverless::Function resource\nalso supports the `Metadata` resource attribute, so you can instruct AWS SAM to build\ncustom runtimes that your application requires. For more information about building custom\nruntimes, see [Building Lambda functions with custom runtimes in AWS SAM](./building-custom-runtimes.html).\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\nFor more information, see [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "ProvisionedConcurrencyConfig"
        },
        "ReservedConcurrentExecutions": {
          "Required": false,
          "MarkdownDocumentation": "`ReservedConcurrentExecutions`\n\nCreates an AWS Lambda function, an AWS Identity and Access Management (IAM) execution role, and event source\nmappings that trigger the function.\nThe AWS::Serverless::Function resource\nalso supports the `Metadata` resource attribute, so you can instruct AWS SAM to build\ncustom runtimes that your application requires. For more information about building custom\nruntimes, see [Building Lambda functions with custom runtimes in AWS SAM](./building-custom-runtimes.html).\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\nFor more information, see [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "number"
        },
        "Role": {
          "Required": false,
          "MarkdownDocumentation": "`Role`\n\nCreates an AWS Lambda function, an AWS Identity and Access Management (IAM) execution role, and event source\nmappings that trigger the function.\nThe AWS::Serverless::Function resource\nalso supports the `Metadata` resource attribute, so you can instruct AWS SAM to build\ncustom runtimes that your application requires. For more information about building custom\nruntimes, see [Building Lambda functions with custom runtimes in AWS SAM](./building-custom-runtimes.html).\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\nFor more information, see [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "string"
        },
        "Runtime": {
          "Required": false,
          "MarkdownDocumentation": "`Runtime`\n\nCreates an AWS Lambda function, an AWS Identity and Access Management (IAM) execution role, and event source\nmappings that trigger the function.\nThe AWS::Serverless::Function resource\nalso supports the `Metadata` resource attribute, so you can instruct AWS SAM to build\ncustom runtimes that your application requires. For more information about building custom\nruntimes, see [Building Lambda functions with custom runtimes in AWS SAM](./building-custom-runtimes.html).\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\nFor more information, see [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "string"
        },
        "Tags": {
          "additionalProperties": true,
          "patternProperties": {
            "^[a-zA-Z0-9]+$": {
              "type": "string"
            }
          },
          "Required": false,
          "MarkdownDocumentation": "`Tags`\n\nCreates an AWS Lambda function, an AWS Identity and Access Management (IAM) execution role, and event source\nmappings that trigger the function.\nThe AWS::Serverless::Function resource\nalso supports the `Metadata` resource attribute, so you can instruct AWS SAM to build\ncustom runtimes that your application requires. For more information about building custom\nruntimes, see [Building Lambda functions with custom runtimes in AWS SAM](./building-custom-runtimes.html).\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\nFor more information, see [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "object"
        },
        "Timeout": {
          "Required": false,
          "MarkdownDocumentation": "`Timeout`\n\nCreates an AWS Lambda function, an AWS Identity and Access Management (IAM) execution role, and event source\nmappings that trigger the function.\nThe AWS::Serverless::Function resource\nalso supports the `Metadata` resource attribute, so you can instruct AWS SAM to build\ncustom runtimes that your application requires. For more information about building custom\nruntimes, see [Building Lambda functions with custom runtimes in AWS SAM](./building-custom-runtimes.html).\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\nFor more information, see [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "number"
        },
        "Tracing": {
          "Required": false,
          "MarkdownDocumentation": "`Tracing`\n\nCreates an AWS Lambda function, an AWS Identity and Access Management (IAM) execution role, and event source\nmappings that trigger the function.\nThe AWS::Serverless::Function resource\nalso supports the `Metadata` resource attribute, so you can instruct AWS SAM to build\ncustom runtimes that your application requires. For more information about building custom\nruntimes, see [Building Lambda functions with custom runtimes in AWS SAM](./building-custom-runtimes.html).\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\nFor more information, see [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "string"
        },
        "VersionDescription": {
          "Required": false,
          "MarkdownDocumentation": "`VersionDescription`\n\nCreates an AWS Lambda function, an AWS Identity and Access Management (IAM) execution role, and event source\nmappings that trigger the function.\nThe AWS::Serverless::Function resource\nalso supports the `Metadata` resource attribute, so you can instruct AWS SAM to build\ncustom runtimes that your application requires. For more information about building custom\nruntimes, see [Building Lambda functions with custom runtimes in AWS SAM](./building-custom-runtimes.html).\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\nFor more information, see [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "string"
        },
        "VpcConfig": {
          "Required": false,
          "MarkdownDocumentation": "`VpcConfig`\n\nCreates an AWS Lambda function, an AWS Identity and Access Management (IAM) execution role, and event source\nmappings that trigger the function.\nThe AWS::Serverless::Function resource\nalso supports the `Metadata` resource attribute, so you can instruct AWS SAM to build\ncustom runtimes that your application requires. For more information about building custom\nruntimes, see [Building Lambda functions with custom runtimes in AWS SAM](./building-custom-runtimes.html).\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\nFor more information, see [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "VpcConfig"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function`\n\nCreates an AWS Lambda function, an AWS Identity and Access Management (IAM) execution role, and event source\nmappings that trigger the function.\nThe AWS::Serverless::Function resource\nalso supports the `Metadata` resource attribute, so you can instruct AWS SAM to build\ncustom runtimes that your application requires. For more information about building custom\nruntimes, see [Building Lambda functions with custom runtimes in AWS SAM](./building-custom-runtimes.html).\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\nFor more information, see [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n"
    },
    "AWS::Serverless::HttpApi": {
      "Properties": {
        "AccessLogSetting": {
          "Required": false,
          "MarkdownDocumentation": "`AccessLogSetting`\n\nCreates an Amazon API Gateway HTTP API, which enables you to create RESTful APIs with lower latency\nand lower costs than REST APIs. For more information, see [Working with HTTP\nAPIs](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api.html) in the *API Gateway Developer Guide*.\nWe recommend that you use AWS CloudFormation hooks or IAM policies to verify that API Gateway resources have\nauthorizers attached to them to control access to them.\nFor more information about using AWS CloudFormation hooks, see [Registering hooks](https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/registering-hook-python.html) in the *AWS CloudFormation CLI user guide* and\nthe [apigw-enforce-authorizer](https://github.com/aws-cloudformation/aws-cloudformation-samples/tree/main/hooks/python-hooks/apigw-enforce-authorizer/) GitHub repository.\nFor more information about using IAM policies, see [Require that API routes have authorization](https://docs.aws.amazon.com/apigateway/latest/developerguide/security_iam_id-based-policy-examples.html#security_iam_id-based-policy-examples-require-authorization) in the *API Gateway Developer Guide*.\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\nFor more information, see [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "AccessLogSetting"
        },
        "Auth": {
          "Required": false,
          "MarkdownDocumentation": "`Auth`\n\nCreates an Amazon API Gateway HTTP API, which enables you to create RESTful APIs with lower latency\nand lower costs than REST APIs. For more information, see [Working with HTTP\nAPIs](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api.html) in the *API Gateway Developer Guide*.\nWe recommend that you use AWS CloudFormation hooks or IAM policies to verify that API Gateway resources have\nauthorizers attached to them to control access to them.\nFor more information about using AWS CloudFormation hooks, see [Registering hooks](https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/registering-hook-python.html) in the *AWS CloudFormation CLI user guide* and\nthe [apigw-enforce-authorizer](https://github.com/aws-cloudformation/aws-cloudformation-samples/tree/main/hooks/python-hooks/apigw-enforce-authorizer/) GitHub repository.\nFor more information about using IAM policies, see [Require that API routes have authorization](https://docs.aws.amazon.com/apigateway/latest/developerguide/security_iam_id-based-policy-examples.html#security_iam_id-based-policy-examples-require-authorization) in the *API Gateway Developer Guide*.\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\nFor more information, see [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "HttpApiAuth"
        },
        "CorsConfiguration": {
          "Required": false,
          "MarkdownDocumentation": "`CorsConfiguration`\n\nCreates an Amazon API Gateway HTTP API, which enables you to create RESTful APIs with lower latency\nand lower costs than REST APIs. For more information, see [Working with HTTP\nAPIs](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api.html) in the *API Gateway Developer Guide*.\nWe recommend that you use AWS CloudFormation hooks or IAM policies to verify that API Gateway resources have\nauthorizers attached to them to control access to them.\nFor more information about using AWS CloudFormation hooks, see [Registering hooks](https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/registering-hook-python.html) in the *AWS CloudFormation CLI user guide* and\nthe [apigw-enforce-authorizer](https://github.com/aws-cloudformation/aws-cloudformation-samples/tree/main/hooks/python-hooks/apigw-enforce-authorizer/) GitHub repository.\nFor more information about using IAM policies, see [Require that API routes have authorization](https://docs.aws.amazon.com/apigateway/latest/developerguide/security_iam_id-based-policy-examples.html#security_iam_id-based-policy-examples-require-authorization) in the *API Gateway Developer Guide*.\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\nFor more information, see [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "CorsConfigurationObject"
        },
        "DefaultRouteSettings": {
          "Required": false,
          "MarkdownDocumentation": "`DefaultRouteSettings`\n\nCreates an Amazon API Gateway HTTP API, which enables you to create RESTful APIs with lower latency\nand lower costs than REST APIs. For more information, see [Working with HTTP\nAPIs](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api.html) in the *API Gateway Developer Guide*.\nWe recommend that you use AWS CloudFormation hooks or IAM policies to verify that API Gateway resources have\nauthorizers attached to them to control access to them.\nFor more information about using AWS CloudFormation hooks, see [Registering hooks](https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/registering-hook-python.html) in the *AWS CloudFormation CLI user guide* and\nthe [apigw-enforce-authorizer](https://github.com/aws-cloudformation/aws-cloudformation-samples/tree/main/hooks/python-hooks/apigw-enforce-authorizer/) GitHub repository.\nFor more information about using IAM policies, see [Require that API routes have authorization](https://docs.aws.amazon.com/apigateway/latest/developerguide/security_iam_id-based-policy-examples.html#security_iam_id-based-policy-examples-require-authorization) in the *API Gateway Developer Guide*.\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\nFor more information, see [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "RouteSettings"
        },
        "DefinitionBody": {
          "Required": false,
          "MarkdownDocumentation": "`DefinitionBody`\n\nCreates an Amazon API Gateway HTTP API, which enables you to create RESTful APIs with lower latency\nand lower costs than REST APIs. For more information, see [Working with HTTP\nAPIs](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api.html) in the *API Gateway Developer Guide*.\nWe recommend that you use AWS CloudFormation hooks or IAM policies to verify that API Gateway resources have\nauthorizers attached to them to control access to them.\nFor more information about using AWS CloudFormation hooks, see [Registering hooks](https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/registering-hook-python.html) in the *AWS CloudFormation CLI user guide* and\nthe [apigw-enforce-authorizer](https://github.com/aws-cloudformation/aws-cloudformation-samples/tree/main/hooks/python-hooks/apigw-enforce-authorizer/) GitHub repository.\nFor more information about using IAM policies, see [Require that API routes have authorization](https://docs.aws.amazon.com/apigateway/latest/developerguide/security_iam_id-based-policy-examples.html#security_iam_id-based-policy-examples-require-authorization) in the *API Gateway Developer Guide*.\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\nFor more information, see [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "object"
        },
        "DefinitionUri": {
          "Required": false,
          "MarkdownDocumentation": "`DefinitionUri`\n\nCreates an Amazon API Gateway HTTP API, which enables you to create RESTful APIs with lower latency\nand lower costs than REST APIs. For more information, see [Working with HTTP\nAPIs](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api.html) in the *API Gateway Developer Guide*.\nWe recommend that you use AWS CloudFormation hooks or IAM policies to verify that API Gateway resources have\nauthorizers attached to them to control access to them.\nFor more information about using AWS CloudFormation hooks, see [Registering hooks](https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/registering-hook-python.html) in the *AWS CloudFormation CLI user guide* and\nthe [apigw-enforce-authorizer](https://github.com/aws-cloudformation/aws-cloudformation-samples/tree/main/hooks/python-hooks/apigw-enforce-authorizer/) GitHub repository.\nFor more information about using IAM policies, see [Require that API routes have authorization](https://docs.aws.amazon.com/apigateway/latest/developerguide/security_iam_id-based-policy-examples.html#security_iam_id-based-policy-examples-require-authorization) in the *API Gateway Developer Guide*.\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\nFor more information, see [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "S3Location"
        },
        "Description": {
          "Required": false,
          "MarkdownDocumentation": "`Description`\n\nCreates an Amazon API Gateway HTTP API, which enables you to create RESTful APIs with lower latency\nand lower costs than REST APIs. For more information, see [Working with HTTP\nAPIs](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api.html) in the *API Gateway Developer Guide*.\nWe recommend that you use AWS CloudFormation hooks or IAM policies to verify that API Gateway resources have\nauthorizers attached to them to control access to them.\nFor more information about using AWS CloudFormation hooks, see [Registering hooks](https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/registering-hook-python.html) in the *AWS CloudFormation CLI user guide* and\nthe [apigw-enforce-authorizer](https://github.com/aws-cloudformation/aws-cloudformation-samples/tree/main/hooks/python-hooks/apigw-enforce-authorizer/) GitHub repository.\nFor more information about using IAM policies, see [Require that API routes have authorization](https://docs.aws.amazon.com/apigateway/latest/developerguide/security_iam_id-based-policy-examples.html#security_iam_id-based-policy-examples-require-authorization) in the *API Gateway Developer Guide*.\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\nFor more information, see [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "string"
        },
        "DisableExecuteApiEndpoint": {
          "Required": false,
          "MarkdownDocumentation": "`DisableExecuteApiEndpoint`\n\nCreates an Amazon API Gateway HTTP API, which enables you to create RESTful APIs with lower latency\nand lower costs than REST APIs. For more information, see [Working with HTTP\nAPIs](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api.html) in the *API Gateway Developer Guide*.\nWe recommend that you use AWS CloudFormation hooks or IAM policies to verify that API Gateway resources have\nauthorizers attached to them to control access to them.\nFor more information about using AWS CloudFormation hooks, see [Registering hooks](https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/registering-hook-python.html) in the *AWS CloudFormation CLI user guide* and\nthe [apigw-enforce-authorizer](https://github.com/aws-cloudformation/aws-cloudformation-samples/tree/main/hooks/python-hooks/apigw-enforce-authorizer/) GitHub repository.\nFor more information about using IAM policies, see [Require that API routes have authorization](https://docs.aws.amazon.com/apigateway/latest/developerguide/security_iam_id-based-policy-examples.html#security_iam_id-based-policy-examples-require-authorization) in the *API Gateway Developer Guide*.\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\nFor more information, see [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "boolean"
        },
        "Domain": {
          "Required": false,
          "MarkdownDocumentation": "`Domain`\n\nCreates an Amazon API Gateway HTTP API, which enables you to create RESTful APIs with lower latency\nand lower costs than REST APIs. For more information, see [Working with HTTP\nAPIs](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api.html) in the *API Gateway Developer Guide*.\nWe recommend that you use AWS CloudFormation hooks or IAM policies to verify that API Gateway resources have\nauthorizers attached to them to control access to them.\nFor more information about using AWS CloudFormation hooks, see [Registering hooks](https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/registering-hook-python.html) in the *AWS CloudFormation CLI user guide* and\nthe [apigw-enforce-authorizer](https://github.com/aws-cloudformation/aws-cloudformation-samples/tree/main/hooks/python-hooks/apigw-enforce-authorizer/) GitHub repository.\nFor more information about using IAM policies, see [Require that API routes have authorization](https://docs.aws.amazon.com/apigateway/latest/developerguide/security_iam_id-based-policy-examples.html#security_iam_id-based-policy-examples-require-authorization) in the *API Gateway Developer Guide*.\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\nFor more information, see [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "HttpApiDomainConfiguration"
        },
        "FailOnWarnings": {
          "Required": false,
          "MarkdownDocumentation": "`FailOnWarnings`\n\nCreates an Amazon API Gateway HTTP API, which enables you to create RESTful APIs with lower latency\nand lower costs than REST APIs. For more information, see [Working with HTTP\nAPIs](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api.html) in the *API Gateway Developer Guide*.\nWe recommend that you use AWS CloudFormation hooks or IAM policies to verify that API Gateway resources have\nauthorizers attached to them to control access to them.\nFor more information about using AWS CloudFormation hooks, see [Registering hooks](https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/registering-hook-python.html) in the *AWS CloudFormation CLI user guide* and\nthe [apigw-enforce-authorizer](https://github.com/aws-cloudformation/aws-cloudformation-samples/tree/main/hooks/python-hooks/apigw-enforce-authorizer/) GitHub repository.\nFor more information about using IAM policies, see [Require that API routes have authorization](https://docs.aws.amazon.com/apigateway/latest/developerguide/security_iam_id-based-policy-examples.html#security_iam_id-based-policy-examples-require-authorization) in the *API Gateway Developer Guide*.\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\nFor more information, see [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "boolean"
        },
        "RouteSettings": {
          "Required": false,
          "MarkdownDocumentation": "`RouteSettings`\n\nCreates an Amazon API Gateway HTTP API, which enables you to create RESTful APIs with lower latency\nand lower costs than REST APIs. For more information, see [Working with HTTP\nAPIs](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api.html) in the *API Gateway Developer Guide*.\nWe recommend that you use AWS CloudFormation hooks or IAM policies to verify that API Gateway resources have\nauthorizers attached to them to control access to them.\nFor more information about using AWS CloudFormation hooks, see [Registering hooks](https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/registering-hook-python.html) in the *AWS CloudFormation CLI user guide* and\nthe [apigw-enforce-authorizer](https://github.com/aws-cloudformation/aws-cloudformation-samples/tree/main/hooks/python-hooks/apigw-enforce-authorizer/) GitHub repository.\nFor more information about using IAM policies, see [Require that API routes have authorization](https://docs.aws.amazon.com/apigateway/latest/developerguide/security_iam_id-based-policy-examples.html#security_iam_id-based-policy-examples-require-authorization) in the *API Gateway Developer Guide*.\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\nFor more information, see [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "RouteSettings"
        },
        "StageName": {
          "Required": false,
          "MarkdownDocumentation": "`StageName`\n\nCreates an Amazon API Gateway HTTP API, which enables you to create RESTful APIs with lower latency\nand lower costs than REST APIs. For more information, see [Working with HTTP\nAPIs](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api.html) in the *API Gateway Developer Guide*.\nWe recommend that you use AWS CloudFormation hooks or IAM policies to verify that API Gateway resources have\nauthorizers attached to them to control access to them.\nFor more information about using AWS CloudFormation hooks, see [Registering hooks](https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/registering-hook-python.html) in the *AWS CloudFormation CLI user guide* and\nthe [apigw-enforce-authorizer](https://github.com/aws-cloudformation/aws-cloudformation-samples/tree/main/hooks/python-hooks/apigw-enforce-authorizer/) GitHub repository.\nFor more information about using IAM policies, see [Require that API routes have authorization](https://docs.aws.amazon.com/apigateway/latest/developerguide/security_iam_id-based-policy-examples.html#security_iam_id-based-policy-examples-require-authorization) in the *API Gateway Developer Guide*.\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\nFor more information, see [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "string"
        },
        "StageVariables": {
          "additionalProperties": true,
          "patternProperties": {
            "^[a-zA-Z0-9]+$": {
              "type": "string"
            }
          },
          "Required": false,
          "MarkdownDocumentation": "`StageVariables`\n\nCreates an Amazon API Gateway HTTP API, which enables you to create RESTful APIs with lower latency\nand lower costs than REST APIs. For more information, see [Working with HTTP\nAPIs](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api.html) in the *API Gateway Developer Guide*.\nWe recommend that you use AWS CloudFormation hooks or IAM policies to verify that API Gateway resources have\nauthorizers attached to them to control access to them.\nFor more information about using AWS CloudFormation hooks, see [Registering hooks](https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/registering-hook-python.html) in the *AWS CloudFormation CLI user guide* and\nthe [apigw-enforce-authorizer](https://github.com/aws-cloudformation/aws-cloudformation-samples/tree/main/hooks/python-hooks/apigw-enforce-authorizer/) GitHub repository.\nFor more information about using IAM policies, see [Require that API routes have authorization](https://docs.aws.amazon.com/apigateway/latest/developerguide/security_iam_id-based-policy-examples.html#security_iam_id-based-policy-examples-require-authorization) in the *API Gateway Developer Guide*.\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\nFor more information, see [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "object"
        },
        "Tags": {
          "additionalProperties": true,
          "patternProperties": {
            "^[a-zA-Z0-9]+$": {
              "type": "string"
            }
          },
          "Required": false,
          "MarkdownDocumentation": "`Tags`\n\nCreates an Amazon API Gateway HTTP API, which enables you to create RESTful APIs with lower latency\nand lower costs than REST APIs. For more information, see [Working with HTTP\nAPIs](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api.html) in the *API Gateway Developer Guide*.\nWe recommend that you use AWS CloudFormation hooks or IAM policies to verify that API Gateway resources have\nauthorizers attached to them to control access to them.\nFor more information about using AWS CloudFormation hooks, see [Registering hooks](https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/registering-hook-python.html) in the *AWS CloudFormation CLI user guide* and\nthe [apigw-enforce-authorizer](https://github.com/aws-cloudformation/aws-cloudformation-samples/tree/main/hooks/python-hooks/apigw-enforce-authorizer/) GitHub repository.\nFor more information about using IAM policies, see [Require that API routes have authorization](https://docs.aws.amazon.com/apigateway/latest/developerguide/security_iam_id-based-policy-examples.html#security_iam_id-based-policy-examples-require-authorization) in the *API Gateway Developer Guide*.\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\nFor more information, see [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "object"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::HttpApi`\n\nCreates an Amazon API Gateway HTTP API, which enables you to create RESTful APIs with lower latency\nand lower costs than REST APIs. For more information, see [Working with HTTP\nAPIs](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api.html) in the *API Gateway Developer Guide*.\nWe recommend that you use AWS CloudFormation hooks or IAM policies to verify that API Gateway resources have\nauthorizers attached to them to control access to them.\nFor more information about using AWS CloudFormation hooks, see [Registering hooks](https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/registering-hook-python.html) in the *AWS CloudFormation CLI user guide* and\nthe [apigw-enforce-authorizer](https://github.com/aws-cloudformation/aws-cloudformation-samples/tree/main/hooks/python-hooks/apigw-enforce-authorizer/) GitHub repository.\nFor more information about using IAM policies, see [Require that API routes have authorization](https://docs.aws.amazon.com/apigateway/latest/developerguide/security_iam_id-based-policy-examples.html#security_iam_id-based-policy-examples-require-authorization) in the *API Gateway Developer Guide*.\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\nFor more information, see [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n"
    },
    "AWS::Serverless::LayerVersion": {
      "Properties": {
        "CompatibleRuntimes": {
          "Required": false,
          "MarkdownDocumentation": "`CompatibleRuntimes`\n\nCreates a Lambda LayerVersion that contains library or runtime code needed by a Lambda Function.\nThe AWS::Serverless::LayerVersion resource also supports the `Metadata` resource attribute, so you can instruct AWS SAM to build layers included in your application. For more information about building layers, see [Building Lambda layers in AWS SAM](./building-layers.html).\n**Important Note**: Since the release of the [UpdateReplacePolicy](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-updatereplacepolicy.html) resource attribute in AWS CloudFormation, [AWS::Lambda::LayerVersion](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-layerversion.html) (recommended) offers the same benefits as AWS::Serverless::LayerVersion.\nWhen a Serverless LayerVersion is transformed, SAM also transforms the logical id of the resource so that old LayerVersions are not automatically deleted by CloudFormation when the resource is updated.\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources. For more information,\nsee [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "List",
          "ItemType": "string"
        },
        "ContentUri": {
          "Required": false,
          "MarkdownDocumentation": "`ContentUri`\n\nCreates a Lambda LayerVersion that contains library or runtime code needed by a Lambda Function.\nThe AWS::Serverless::LayerVersion resource also supports the `Metadata` resource attribute, so you can instruct AWS SAM to build layers included in your application. For more information about building layers, see [Building Lambda layers in AWS SAM](./building-layers.html).\n**Important Note**: Since the release of the [UpdateReplacePolicy](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-updatereplacepolicy.html) resource attribute in AWS CloudFormation, [AWS::Lambda::LayerVersion](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-layerversion.html) (recommended) offers the same benefits as AWS::Serverless::LayerVersion.\nWhen a Serverless LayerVersion is transformed, SAM also transforms the logical id of the resource so that old LayerVersions are not automatically deleted by CloudFormation when the resource is updated.\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources. For more information,\nsee [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "S3Location"
        },
        "Description": {
          "Required": false,
          "MarkdownDocumentation": "`Description`\n\nCreates a Lambda LayerVersion that contains library or runtime code needed by a Lambda Function.\nThe AWS::Serverless::LayerVersion resource also supports the `Metadata` resource attribute, so you can instruct AWS SAM to build layers included in your application. For more information about building layers, see [Building Lambda layers in AWS SAM](./building-layers.html).\n**Important Note**: Since the release of the [UpdateReplacePolicy](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-updatereplacepolicy.html) resource attribute in AWS CloudFormation, [AWS::Lambda::LayerVersion](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-layerversion.html) (recommended) offers the same benefits as AWS::Serverless::LayerVersion.\nWhen a Serverless LayerVersion is transformed, SAM also transforms the logical id of the resource so that old LayerVersions are not automatically deleted by CloudFormation when the resource is updated.\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources. For more information,\nsee [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "string"
        },
        "LayerName": {
          "Required": false,
          "MarkdownDocumentation": "`LayerName`\n\nCreates a Lambda LayerVersion that contains library or runtime code needed by a Lambda Function.\nThe AWS::Serverless::LayerVersion resource also supports the `Metadata` resource attribute, so you can instruct AWS SAM to build layers included in your application. For more information about building layers, see [Building Lambda layers in AWS SAM](./building-layers.html).\n**Important Note**: Since the release of the [UpdateReplacePolicy](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-updatereplacepolicy.html) resource attribute in AWS CloudFormation, [AWS::Lambda::LayerVersion](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-layerversion.html) (recommended) offers the same benefits as AWS::Serverless::LayerVersion.\nWhen a Serverless LayerVersion is transformed, SAM also transforms the logical id of the resource so that old LayerVersions are not automatically deleted by CloudFormation when the resource is updated.\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources. For more information,\nsee [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "string"
        },
        "LicenseInfo": {
          "Required": false,
          "MarkdownDocumentation": "`LicenseInfo`\n\nCreates a Lambda LayerVersion that contains library or runtime code needed by a Lambda Function.\nThe AWS::Serverless::LayerVersion resource also supports the `Metadata` resource attribute, so you can instruct AWS SAM to build layers included in your application. For more information about building layers, see [Building Lambda layers in AWS SAM](./building-layers.html).\n**Important Note**: Since the release of the [UpdateReplacePolicy](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-updatereplacepolicy.html) resource attribute in AWS CloudFormation, [AWS::Lambda::LayerVersion](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-layerversion.html) (recommended) offers the same benefits as AWS::Serverless::LayerVersion.\nWhen a Serverless LayerVersion is transformed, SAM also transforms the logical id of the resource so that old LayerVersions are not automatically deleted by CloudFormation when the resource is updated.\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources. For more information,\nsee [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "string"
        },
        "RetentionPolicy": {
          "Required": false,
          "MarkdownDocumentation": "`RetentionPolicy`\n\nCreates a Lambda LayerVersion that contains library or runtime code needed by a Lambda Function.\nThe AWS::Serverless::LayerVersion resource also supports the `Metadata` resource attribute, so you can instruct AWS SAM to build layers included in your application. For more information about building layers, see [Building Lambda layers in AWS SAM](./building-layers.html).\n**Important Note**: Since the release of the [UpdateReplacePolicy](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-updatereplacepolicy.html) resource attribute in AWS CloudFormation, [AWS::Lambda::LayerVersion](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-layerversion.html) (recommended) offers the same benefits as AWS::Serverless::LayerVersion.\nWhen a Serverless LayerVersion is transformed, SAM also transforms the logical id of the resource so that old LayerVersions are not automatically deleted by CloudFormation when the resource is updated.\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources. For more information,\nsee [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::LayerVersion`\n\nCreates a Lambda LayerVersion that contains library or runtime code needed by a Lambda Function.\nThe AWS::Serverless::LayerVersion resource also supports the `Metadata` resource attribute, so you can instruct AWS SAM to build layers included in your application. For more information about building layers, see [Building Lambda layers in AWS SAM](./building-layers.html).\n**Important Note**: Since the release of the [UpdateReplacePolicy](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-updatereplacepolicy.html) resource attribute in AWS CloudFormation, [AWS::Lambda::LayerVersion](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-layerversion.html) (recommended) offers the same benefits as AWS::Serverless::LayerVersion.\nWhen a Serverless LayerVersion is transformed, SAM also transforms the logical id of the resource so that old LayerVersions are not automatically deleted by CloudFormation when the resource is updated.\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources. For more information,\nsee [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n"
    },
    "AWS::Serverless::SimpleTable": {
      "Properties": {
        "PrimaryKey": {
          "Required": false,
          "MarkdownDocumentation": "`PrimaryKey`\n\nCreates a DynamoDB table with a single attribute primary key. It is useful when data only\nneeds to be accessed via a primary key.\nFor more advanced features, use an [AWS::DynamoDB::Table](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-dynamodb-table.html) resource in AWS CloudFormation. These resouces can be used in AWS SAM. They are comprehensive and provide further customization, including\n[key schema](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-dynamodb-table-keyschema.html) and\n[resource policy](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-dynamodb-table-resourcepolicy.html) customization.\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\nFor more information, see [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "PrimaryKey"
        },
        "ProvisionedThroughput": {
          "Required": false,
          "MarkdownDocumentation": "`ProvisionedThroughput`\n\nCreates a DynamoDB table with a single attribute primary key. It is useful when data only\nneeds to be accessed via a primary key.\nFor more advanced features, use an [AWS::DynamoDB::Table](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-dynamodb-table.html) resource in AWS CloudFormation. These resouces can be used in AWS SAM. They are comprehensive and provide further customization, including\n[key schema](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-dynamodb-table-keyschema.html) and\n[resource policy](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-dynamodb-table-resourcepolicy.html) customization.\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\nFor more information, see [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "ProvisionedThroughput"
        },
        "SSESpecification": {
          "Required": false,
          "MarkdownDocumentation": "`SSESpecification`\n\nCreates a DynamoDB table with a single attribute primary key. It is useful when data only\nneeds to be accessed via a primary key.\nFor more advanced features, use an [AWS::DynamoDB::Table](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-dynamodb-table.html) resource in AWS CloudFormation. These resouces can be used in AWS SAM. They are comprehensive and provide further customization, including\n[key schema](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-dynamodb-table-keyschema.html) and\n[resource policy](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-dynamodb-table-resourcepolicy.html) customization.\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\nFor more information, see [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "SSESpecification"
        },
        "TableName": {
          "Required": false,
          "MarkdownDocumentation": "`TableName`\n\nCreates a DynamoDB table with a single attribute primary key. It is useful when data only\nneeds to be accessed via a primary key.\nFor more advanced features, use an [AWS::DynamoDB::Table](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-dynamodb-table.html) resource in AWS CloudFormation. These resouces can be used in AWS SAM. They are comprehensive and provide further customization, including\n[key schema](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-dynamodb-table-keyschema.html) and\n[resource policy](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-dynamodb-table-resourcepolicy.html) customization.\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\nFor more information, see [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "string"
        },
        "Tags": {
          "additionalProperties": true,
          "patternProperties": {
            "^[a-zA-Z0-9]+$": {
              "type": "string"
            }
          },
          "Required": false,
          "MarkdownDocumentation": "`Tags`\n\nCreates a DynamoDB table with a single attribute primary key. It is useful when data only\nneeds to be accessed via a primary key.\nFor more advanced features, use an [AWS::DynamoDB::Table](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-dynamodb-table.html) resource in AWS CloudFormation. These resouces can be used in AWS SAM. They are comprehensive and provide further customization, including\n[key schema](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-dynamodb-table-keyschema.html) and\n[resource policy](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-dynamodb-table-resourcepolicy.html) customization.\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\nFor more information, see [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "object"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::SimpleTable`\n\nCreates a DynamoDB table with a single attribute primary key. It is useful when data only\nneeds to be accessed via a primary key.\nFor more advanced features, use an [AWS::DynamoDB::Table](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-dynamodb-table.html) resource in AWS CloudFormation. These resouces can be used in AWS SAM. They are comprehensive and provide further customization, including\n[key schema](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-dynamodb-table-keyschema.html) and\n[resource policy](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-dynamodb-table-resourcepolicy.html) customization.\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\nFor more information, see [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n"
    },
    "AWS::Serverless::StateMachine": {
      "Properties": {
        "Definition": {
          "Required": false,
          "MarkdownDocumentation": "`Definition`\n\nCreates an AWS Step Functions state machine, which you can use to orchestrate AWS Lambda functions and\nother AWS resources to form complex and robust workflows.\nFor more information about Step Functions, see the [AWS Step Functions Developer Guide](https://docs.aws.amazon.com/step-functions/latest/dg/welcome.html).\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\nFor more information, see [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "object"
        },
        "DefinitionSubstitutions": {
          "additionalProperties": true,
          "patternProperties": {
            "^[a-zA-Z0-9]+$": {
              "type": "string"
            }
          },
          "Required": false,
          "MarkdownDocumentation": "`DefinitionSubstitutions`\n\nCreates an AWS Step Functions state machine, which you can use to orchestrate AWS Lambda functions and\nother AWS resources to form complex and robust workflows.\nFor more information about Step Functions, see the [AWS Step Functions Developer Guide](https://docs.aws.amazon.com/step-functions/latest/dg/welcome.html).\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\nFor more information, see [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "object"
        },
        "DefinitionUri": {
          "Required": false,
          "MarkdownDocumentation": "`DefinitionUri`\n\nCreates an AWS Step Functions state machine, which you can use to orchestrate AWS Lambda functions and\nother AWS resources to form complex and robust workflows.\nFor more information about Step Functions, see the [AWS Step Functions Developer Guide](https://docs.aws.amazon.com/step-functions/latest/dg/welcome.html).\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\nFor more information, see [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "S3Location"
        },
        "Events": {
          "additionalProperties": false,
          "patternProperties": {
            "^[a-zA-Z0-9]+$": {
              "$ref": "#/definitions/AWS::Serverless::StateMachine.EventSource"
            }
          },
          "Required": false,
          "MarkdownDocumentation": "`Events`\n\nCreates an AWS Step Functions state machine, which you can use to orchestrate AWS Lambda functions and\nother AWS resources to form complex and robust workflows.\nFor more information about Step Functions, see the [AWS Step Functions Developer Guide](https://docs.aws.amazon.com/step-functions/latest/dg/welcome.html).\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\nFor more information, see [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "object"
        },
        "Logging": {
          "Required": false,
          "MarkdownDocumentation": "`Logging`\n\nCreates an AWS Step Functions state machine, which you can use to orchestrate AWS Lambda functions and\nother AWS resources to form complex and robust workflows.\nFor more information about Step Functions, see the [AWS Step Functions Developer Guide](https://docs.aws.amazon.com/step-functions/latest/dg/welcome.html).\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\nFor more information, see [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "LoggingConfiguration"
        },
        "Name": {
          "Required": false,
          "MarkdownDocumentation": "`Name`\n\nCreates an AWS Step Functions state machine, which you can use to orchestrate AWS Lambda functions and\nother AWS resources to form complex and robust workflows.\nFor more information about Step Functions, see the [AWS Step Functions Developer Guide](https://docs.aws.amazon.com/step-functions/latest/dg/welcome.html).\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\nFor more information, see [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "string"
        },
        "PermissionsBoundaries": {
          "Required": false,
          "MarkdownDocumentation": "`PermissionsBoundaries`\n\nCreates an AWS Step Functions state machine, which you can use to orchestrate AWS Lambda functions and\nother AWS resources to form complex and robust workflows.\nFor more information about Step Functions, see the [AWS Step Functions Developer Guide](https://docs.aws.amazon.com/step-functions/latest/dg/welcome.html).\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\nFor more information, see [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "string"
        },
        "Policies": {
          "Required": false,
          "MarkdownDocumentation": "`Policies`\n\nCreates an AWS Step Functions state machine, which you can use to orchestrate AWS Lambda functions and\nother AWS resources to form complex and robust workflows.\nFor more information about Step Functions, see the [AWS Step Functions Developer Guide](https://docs.aws.amazon.com/step-functions/latest/dg/welcome.html).\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\nFor more information, see [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "IAMPolicyDocument"
        },
        "Role": {
          "Required": false,
          "MarkdownDocumentation": "`Role`\n\nCreates an AWS Step Functions state machine, which you can use to orchestrate AWS Lambda functions and\nother AWS resources to form complex and robust workflows.\nFor more information about Step Functions, see the [AWS Step Functions Developer Guide](https://docs.aws.amazon.com/step-functions/latest/dg/welcome.html).\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\nFor more information, see [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "string"
        },
        "Tags": {
          "additionalProperties": true,
          "patternProperties": {
            "^[a-zA-Z0-9]+$": {
              "type": "string"
            }
          },
          "Required": false,
          "MarkdownDocumentation": "`Tags`\n\nCreates an AWS Step Functions state machine, which you can use to orchestrate AWS Lambda functions and\nother AWS resources to form complex and robust workflows.\nFor more information about Step Functions, see the [AWS Step Functions Developer Guide](https://docs.aws.amazon.com/step-functions/latest/dg/welcome.html).\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\nFor more information, see [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "object"
        },
        "Tracing": {
          "Required": false,
          "MarkdownDocumentation": "`Tracing`\n\nCreates an AWS Step Functions state machine, which you can use to orchestrate AWS Lambda functions and\nother AWS resources to form complex and robust workflows.\nFor more information about Step Functions, see the [AWS Step Functions Developer Guide](https://docs.aws.amazon.com/step-functions/latest/dg/welcome.html).\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\nFor more information, see [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "TracingConfiguration"
        },
        "Type": {
          "Required": false,
          "MarkdownDocumentation": "`Type`\n\nCreates an AWS Step Functions state machine, which you can use to orchestrate AWS Lambda functions and\nother AWS resources to form complex and robust workflows.\nFor more information about Step Functions, see the [AWS Step Functions Developer Guide](https://docs.aws.amazon.com/step-functions/latest/dg/welcome.html).\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\nFor more information, see [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n",
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::StateMachine`\n\nCreates an AWS Step Functions state machine, which you can use to orchestrate AWS Lambda functions and\nother AWS resources to form complex and robust workflows.\nFor more information about Step Functions, see the [AWS Step Functions Developer Guide](https://docs.aws.amazon.com/step-functions/latest/dg/welcome.html).\n###### Note\nWhen you deploy to AWS CloudFormation, AWS SAM transforms your AWS SAM resources into AWS CloudFormation resources.\nFor more information, see [Generated AWS CloudFormation resources for AWS SAM](./sam-specification-generated-resources.html).\n"
    }
  },
  "PropertyTypes": {
    "AWS::Serverless::Api.AccessLogSetting": {
      "Properties": {
        "DestinationArn": {
          "MarkdownDocumentation": "`DestinationArn`\n\nAccess log settings, including the access log format and access log destination ARN.\n*Required*: No\n*Type*: [AccessLogSetting](./aws-properties-apigateway-stage-accesslogsetting.html)\n*Update requires*: [No interruption](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-updating-stacks-update-behaviors.html#update-no-interrupt)\n",
          "Type": "string"
        },
        "Format": {
          "MarkdownDocumentation": "`Format`\n\nAccess log settings, including the access log format and access log destination ARN.\n*Required*: No\n*Type*: [AccessLogSetting](./aws-properties-apigateway-stage-accesslogsetting.html)\n*Update requires*: [No interruption](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-updating-stacks-update-behaviors.html#update-no-interrupt)\n",
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Api.AccessLogSetting`\n\nAccess log settings, including the access log format and access log destination ARN.\n*Required*: No\n*Type*: [AccessLogSetting](./aws-properties-apigateway-stage-accesslogsetting.html)\n*Update requires*: [No interruption](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-updating-stacks-update-behaviors.html#update-no-interrupt)\n"
    },
    "AWS::Serverless::Api.Auth": {
      "Properties": {
        "AddDefaultAuthorizerToCorsPreflight": {
          "MarkdownDocumentation": "`AddDefaultAuthorizerToCorsPreflight`\n",
          "Type": "boolean"
        },
        "Authorizers": {
          "MarkdownDocumentation": "`Authorizers`\n",
          "Type": "object"
        },
        "DefaultAuthorizer": {
          "MarkdownDocumentation": "`DefaultAuthorizer`\n",
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Api.Auth`\n"
    },
    "AWS::Serverless::Api.CanarySetting": {
      "Properties": {
        "DeploymentId": {
          "MarkdownDocumentation": "`DeploymentId`\n\nSettings for the canary deployment in this stage.\n*Required*: No\n*Type*: [CanarySetting](./aws-properties-apigateway-stage-canarysetting.html)\n*Update requires*: [No interruption](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-updating-stacks-update-behaviors.html#update-no-interrupt)\n",
          "Type": "string"
        },
        "PercentTraffic": {
          "MarkdownDocumentation": "`PercentTraffic`\n\nSettings for the canary deployment in this stage.\n*Required*: No\n*Type*: [CanarySetting](./aws-properties-apigateway-stage-canarysetting.html)\n*Update requires*: [No interruption](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-updating-stacks-update-behaviors.html#update-no-interrupt)\n",
          "Type": "number"
        },
        "StageVariableOverrides": {
          "additionalProperties": true,
          "patternProperties": {
            "^[a-zA-Z0-9]+$": {
              "type": "string"
            }
          },
          "MarkdownDocumentation": "`StageVariableOverrides`\n\nSettings for the canary deployment in this stage.\n*Required*: No\n*Type*: [CanarySetting](./aws-properties-apigateway-stage-canarysetting.html)\n*Update requires*: [No interruption](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-updating-stacks-update-behaviors.html#update-no-interrupt)\n",
          "Type": "object"
        },
        "UseStageCache": {
          "MarkdownDocumentation": "`UseStageCache`\n\nSettings for the canary deployment in this stage.\n*Required*: No\n*Type*: [CanarySetting](./aws-properties-apigateway-stage-canarysetting.html)\n*Update requires*: [No interruption](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-updating-stacks-update-behaviors.html#update-no-interrupt)\n",
          "Type": "boolean"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Api.CanarySetting`\n\nSettings for the canary deployment in this stage.\n*Required*: No\n*Type*: [CanarySetting](./aws-properties-apigateway-stage-canarysetting.html)\n*Update requires*: [No interruption](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-updating-stacks-update-behaviors.html#update-no-interrupt)\n"
    },
    "AWS::Serverless::Api.CorsConfiguration": {
      "Properties": {
        "AllowCredentials": {
          "MarkdownDocumentation": "`AllowCredentials`\n\nManage cross-origin resource sharing (CORS) for your API Gateway APIs. Specify the domain to allow as a string or specify a dictionary with additional Cors configuration.\n###### Note\nCORS requires AWS SAM to modify your OpenAPI definition. Create an inline OpenAPI\ndefinition in the `DefinitionBody` to turn on CORS. If the `CorsConfiguration` is\nset in the OpenAPI definition and also at the property level, AWS SAM merges them. The\nproperty level takes precedence over the OpenAPI definition.\nFor more information about CORS, see [Enable CORS for\nan API Gateway REST API Resource](https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-cors.html) in the *API Gateway Developer Guide*.\n",
          "Type": "boolean"
        },
        "AllowHeaders": {
          "MarkdownDocumentation": "`AllowHeaders`\n\nManage cross-origin resource sharing (CORS) for your API Gateway APIs. Specify the domain to allow as a string or specify a dictionary with additional Cors configuration.\n###### Note\nCORS requires AWS SAM to modify your OpenAPI definition. Create an inline OpenAPI\ndefinition in the `DefinitionBody` to turn on CORS. If the `CorsConfiguration` is\nset in the OpenAPI definition and also at the property level, AWS SAM merges them. The\nproperty level takes precedence over the OpenAPI definition.\nFor more information about CORS, see [Enable CORS for\nan API Gateway REST API Resource](https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-cors.html) in the *API Gateway Developer Guide*.\n",
          "Type": "string"
        },
        "AllowMethods": {
          "MarkdownDocumentation": "`AllowMethods`\n\nManage cross-origin resource sharing (CORS) for your API Gateway APIs. Specify the domain to allow as a string or specify a dictionary with additional Cors configuration.\n###### Note\nCORS requires AWS SAM to modify your OpenAPI definition. Create an inline OpenAPI\ndefinition in the `DefinitionBody` to turn on CORS. If the `CorsConfiguration` is\nset in the OpenAPI definition and also at the property level, AWS SAM merges them. The\nproperty level takes precedence over the OpenAPI definition.\nFor more information about CORS, see [Enable CORS for\nan API Gateway REST API Resource](https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-cors.html) in the *API Gateway Developer Guide*.\n",
          "Type": "string"
        },
        "AllowOrigin": {
          "MarkdownDocumentation": "`AllowOrigin`\n\nManage cross-origin resource sharing (CORS) for your API Gateway APIs. Specify the domain to allow as a string or specify a dictionary with additional Cors configuration.\n###### Note\nCORS requires AWS SAM to modify your OpenAPI definition. Create an inline OpenAPI\ndefinition in the `DefinitionBody` to turn on CORS. If the `CorsConfiguration` is\nset in the OpenAPI definition and also at the property level, AWS SAM merges them. The\nproperty level takes precedence over the OpenAPI definition.\nFor more information about CORS, see [Enable CORS for\nan API Gateway REST API Resource](https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-cors.html) in the *API Gateway Developer Guide*.\n",
          "Type": "string"
        },
        "MaxAge": {
          "MarkdownDocumentation": "`MaxAge`\n\nManage cross-origin resource sharing (CORS) for your API Gateway APIs. Specify the domain to allow as a string or specify a dictionary with additional Cors configuration.\n###### Note\nCORS requires AWS SAM to modify your OpenAPI definition. Create an inline OpenAPI\ndefinition in the `DefinitionBody` to turn on CORS. If the `CorsConfiguration` is\nset in the OpenAPI definition and also at the property level, AWS SAM merges them. The\nproperty level takes precedence over the OpenAPI definition.\nFor more information about CORS, see [Enable CORS for\nan API Gateway REST API Resource](https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-cors.html) in the *API Gateway Developer Guide*.\n",
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Api.CorsConfiguration`\n\nManage cross-origin resource sharing (CORS) for your API Gateway APIs. Specify the domain to allow as a string or specify a dictionary with additional Cors configuration.\n###### Note\nCORS requires AWS SAM to modify your OpenAPI definition. Create an inline OpenAPI\ndefinition in the `DefinitionBody` to turn on CORS. If the `CorsConfiguration` is\nset in the OpenAPI definition and also at the property level, AWS SAM merges them. The\nproperty level takes precedence over the OpenAPI definition.\nFor more information about CORS, see [Enable CORS for\nan API Gateway REST API Resource](https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-cors.html) in the *API Gateway Developer Guide*.\n"
    },
    "AWS::Serverless::Api.DomainConfiguration": {
      "Properties": {
        "BasePath": {
          "MarkdownDocumentation": "`BasePath`\n\nConfigures a custom domain for an API.\n",
          "Type": "List",
          "ItemType": "string"
        },
        "CertificateArn": {
          "MarkdownDocumentation": "`CertificateArn`\n\nConfigures a custom domain for an API.\n",
          "Type": "string"
        },
        "DomainName": {
          "MarkdownDocumentation": "`DomainName`\n\nConfigures a custom domain for an API.\n",
          "Type": "string"
        },
        "EndpointConfiguration": {
          "MarkdownDocumentation": "`EndpointConfiguration`\n\nConfigures a custom domain for an API.\n",
          "Type": "string"
        },
        "MutualTlsAuthentication": {
          "MarkdownDocumentation": "`MutualTlsAuthentication`\n\nConfigures a custom domain for an API.\n",
          "Type": "MutualTlsAuthentication"
        },
        "OwnershipVerificationCertificateArn": {
          "MarkdownDocumentation": "`OwnershipVerificationCertificateArn`\n\nConfigures a custom domain for an API.\n",
          "Type": "string"
        },
        "Route53": {
          "MarkdownDocumentation": "`Route53`\n\nConfigures a custom domain for an API.\n",
          "Type": "Route53Configuration"
        },
        "SecurityPolicy": {
          "MarkdownDocumentation": "`SecurityPolicy`\n\nConfigures a custom domain for an API.\n",
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Api.DomainConfiguration`\n\nConfigures a custom domain for an API.\n"
    },
    "AWS::Serverless::Api.EndpointConfiguration": {
      "Properties": {
        "Type": {
          "MarkdownDocumentation": "`Type`\n\nA list of the endpoint types and IP address types of the API. Use this property when creating an API. When importing an existing API, specify the endpoint configuration types using the `Parameters` property.\n*Required*: No\n*Type*: [EndpointConfiguration](./aws-properties-apigateway-restapi-endpointconfiguration.html)\n*Update requires*: [No interruption](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-updating-stacks-update-behaviors.html#update-no-interrupt)\n",
          "Type": "string"
        },
        "VpcEndpointIds": {
          "MarkdownDocumentation": "`VpcEndpointIds`\n\nA list of the endpoint types and IP address types of the API. Use this property when creating an API. When importing an existing API, specify the endpoint configuration types using the `Parameters` property.\n*Required*: No\n*Type*: [EndpointConfiguration](./aws-properties-apigateway-restapi-endpointconfiguration.html)\n*Update requires*: [No interruption](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-updating-stacks-update-behaviors.html#update-no-interrupt)\n",
          "Type": "List",
          "ItemType": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Api.EndpointConfiguration`\n\nA list of the endpoint types and IP address types of the API. Use this property when creating an API. When importing an existing API, specify the endpoint configuration types using the `Parameters` property.\n*Required*: No\n*Type*: [EndpointConfiguration](./aws-properties-apigateway-restapi-endpointconfiguration.html)\n*Update requires*: [No interruption](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-updating-stacks-update-behaviors.html#update-no-interrupt)\n"
    },
    "AWS::Serverless::Api.MutualTlsAuthentication": {
      "Properties": {
        "TruststoreUri": {
          "MarkdownDocumentation": "`TruststoreUri`\n",
          "Type": "string"
        },
        "TruststoreVersion": {
          "MarkdownDocumentation": "`TruststoreVersion`\n",
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Api.MutualTlsAuthentication`\n"
    },
    "AWS::Serverless::Api.Route53Configuration": {
      "Properties": {
        "DistributedDomainName": {
          "MarkdownDocumentation": "`DistributedDomainName`\n\nConfigures the Route53 record sets for an API.\n",
          "Type": "string"
        },
        "EvaluateTargetHealth": {
          "MarkdownDocumentation": "`EvaluateTargetHealth`\n\nConfigures the Route53 record sets for an API.\n",
          "Type": "boolean"
        },
        "HostedZoneId": {
          "MarkdownDocumentation": "`HostedZoneId`\n\nConfigures the Route53 record sets for an API.\n",
          "Type": "string"
        },
        "HostedZoneName": {
          "MarkdownDocumentation": "`HostedZoneName`\n\nConfigures the Route53 record sets for an API.\n",
          "Type": "string"
        },
        "IpV6": {
          "MarkdownDocumentation": "`IpV6`\n\nConfigures the Route53 record sets for an API.\n",
          "Type": "boolean"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Api.Route53Configuration`\n\nConfigures the Route53 record sets for an API.\n"
    },
    "AWS::Serverless::Api.S3Location": {
      "Properties": {
        "Bucket": {
          "MarkdownDocumentation": "`Bucket`\n",
          "Type": "string"
        },
        "Key": {
          "MarkdownDocumentation": "`Key`\n",
          "Type": "string"
        },
        "Version": {
          "MarkdownDocumentation": "`Version`\n",
          "Type": "number"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Api.S3Location`\n"
    },
    "AWS::Serverless::Application.ApplicationLocation": {
      "Properties": {
        "ApplicationId": {
          "MarkdownDocumentation": "`ApplicationId`\n",
          "Type": "string"
        },
        "SemanticVersion": {
          "MarkdownDocumentation": "`SemanticVersion`\n",
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Application.ApplicationLocation`\n"
    },
    "AWS::Serverless::Function.AlexaSkillEvent": {
      "Properties": {
        "SkillId": {
          "MarkdownDocumentation": "`SkillId`\n",
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.AlexaSkillEvent`\n"
    },
    "AWS::Serverless::Function.ApiEvent": {
      "Properties": {
        "Auth": {
          "MarkdownDocumentation": "`Auth`\n",
          "Type": "Auth"
        },
        "Method": {
          "MarkdownDocumentation": "`Method`\n",
          "Type": "string"
        },
        "Path": {
          "MarkdownDocumentation": "`Path`\n",
          "Type": "string"
        },
        "RequestModel": {
          "MarkdownDocumentation": "`RequestModel`\n",
          "Type": "RequestModel"
        },
        "RequestParameters": {
          "MarkdownDocumentation": "`RequestParameters`\n",
          "Type": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "patternProperties": {
                    "^[a-zA-Z0-9]+$": {
                      "$ref": "#/definitions/AWS::Serverless::Function.RequestParameter"
                    }
                  }
                }
              ]
            },
            "type": "array"
          }
        },
        "RestApiId": {
          "MarkdownDocumentation": "`RestApiId`\n",
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.ApiEvent`\n"
    },
    "AWS::Serverless::Function.Auth": {
      "Properties": {
        "ApiKeyRequired": {
          "MarkdownDocumentation": "`ApiKeyRequired`\n",
          "Type": "boolean"
        },
        "AuthorizationScopes": {
          "MarkdownDocumentation": "`AuthorizationScopes`\n",
          "Type": "List",
          "ItemType": "string"
        },
        "Authorizer": {
          "MarkdownDocumentation": "`Authorizer`\n",
          "Type": "string"
        },
        "ResourcePolicy": {
          "MarkdownDocumentation": "`ResourcePolicy`\n",
          "Type": "AuthResourcePolicy"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.Auth`\n"
    },
    "AWS::Serverless::Function.AuthResourcePolicy": {
      "Properties": {
        "AwsAccountBlacklist": {
          "MarkdownDocumentation": "`AwsAccountBlacklist`\n",
          "Type": "List",
          "ItemType": "string"
        },
        "AwsAccountWhitelist": {
          "MarkdownDocumentation": "`AwsAccountWhitelist`\n",
          "Type": "List",
          "ItemType": "string"
        },
        "CustomStatements": {
          "MarkdownDocumentation": "`CustomStatements`\n",
          "Type": "List",
          "ItemType": "object"
        },
        "IntrinsicVpcBlacklist": {
          "MarkdownDocumentation": "`IntrinsicVpcBlacklist`\n",
          "Type": "List",
          "ItemType": "string"
        },
        "IntrinsicVpcWhitelist": {
          "MarkdownDocumentation": "`IntrinsicVpcWhitelist`\n",
          "Type": "List",
          "ItemType": "string"
        },
        "IntrinsicVpceBlacklist": {
          "MarkdownDocumentation": "`IntrinsicVpceBlacklist`\n",
          "Type": "List",
          "ItemType": "string"
        },
        "IntrinsicVpceWhitelist": {
          "MarkdownDocumentation": "`IntrinsicVpceWhitelist`\n",
          "Type": "List",
          "ItemType": "string"
        },
        "IpRangeBlacklist": {
          "MarkdownDocumentation": "`IpRangeBlacklist`\n",
          "Type": "List",
          "ItemType": "string"
        },
        "IpRangeWhitelist": {
          "MarkdownDocumentation": "`IpRangeWhitelist`\n",
          "Type": "List",
          "ItemType": "string"
        },
        "SourceVpcBlacklist": {
          "MarkdownDocumentation": "`SourceVpcBlacklist`\n",
          "Type": "List",
          "ItemType": "string"
        },
        "SourceVpcWhitelist": {
          "MarkdownDocumentation": "`SourceVpcWhitelist`\n",
          "Type": "List",
          "ItemType": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.AuthResourcePolicy`\n"
    },
    "AWS::Serverless::Function.BucketSAMPT": {
      "Properties": {
        "BucketName": {
          "MarkdownDocumentation": "`BucketName`\n",
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.BucketSAMPT`\n"
    },
    "AWS::Serverless::Function.CloudWatchEventEvent": {
      "Properties": {
        "Input": {
          "MarkdownDocumentation": "`Input`\n",
          "Type": "string"
        },
        "InputPath": {
          "MarkdownDocumentation": "`InputPath`\n",
          "Type": "string"
        },
        "Pattern": {
          "MarkdownDocumentation": "`Pattern`\n",
          "Type": "object"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.CloudWatchEventEvent`\n"
    },
    "AWS::Serverless::Function.CloudWatchLogsEvent": {
      "Properties": {
        "FilterPattern": {
          "MarkdownDocumentation": "`FilterPattern`\n",
          "Type": "string"
        },
        "LogGroupName": {
          "MarkdownDocumentation": "`LogGroupName`\n",
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.CloudWatchLogsEvent`\n"
    },
    "AWS::Serverless::Function.CognitoEvent": {
      "Properties": {
        "Trigger": {
          "MarkdownDocumentation": "`Trigger`\n",
          "Type": {
            "type": [
              "string"
            ]
          }
        },
        "UserPool": {
          "MarkdownDocumentation": "`UserPool`\n",
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.CognitoEvent`\n"
    },
    "AWS::Serverless::Function.CollectionSAMPT": {
      "Properties": {
        "CollectionId": {
          "MarkdownDocumentation": "`CollectionId`\n",
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.CollectionSAMPT`\n"
    },
    "AWS::Serverless::Function.CorsConfiguration": {
      "Properties": {
        "AllowCredentials": {
          "MarkdownDocumentation": "`AllowCredentials`\n",
          "Type": "boolean"
        },
        "AllowHeaders": {
          "MarkdownDocumentation": "`AllowHeaders`\n",
          "Type": "string"
        },
        "AllowMethods": {
          "MarkdownDocumentation": "`AllowMethods`\n",
          "Type": "string"
        },
        "AllowOrigin": {
          "MarkdownDocumentation": "`AllowOrigin`\n",
          "Type": "string"
        },
        "MaxAge": {
          "MarkdownDocumentation": "`MaxAge`\n",
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.CorsConfiguration`\n"
    },
    "AWS::Serverless::Function.DeadLetterQueue": {
      "Properties": {
        "TargetArn": {
          "MarkdownDocumentation": "`TargetArn`\n\nSpecifies an SQS queue or SNS topic that AWS Lambda (Lambda) sends events to when it can't process them. For more information about dead letter queue functionality, see\n[Dead-letter queues](https://docs.aws.amazon.com/lambda/latest/dg/invocation-async-retain-records.html#invocation-dlq) in the *AWS Lambda Developer Guide*.\nSAM will automatically add appropriate permission to your Lambda function execution role to give Lambda service access to the resource. sqs:SendMessage will be added for SQS queues and sns:Publish for SNS topics.\n",
          "Type": "string"
        },
        "Type": {
          "MarkdownDocumentation": "`Type`\n\nSpecifies an SQS queue or SNS topic that AWS Lambda (Lambda) sends events to when it can't process them. For more information about dead letter queue functionality, see\n[Dead-letter queues](https://docs.aws.amazon.com/lambda/latest/dg/invocation-async-retain-records.html#invocation-dlq) in the *AWS Lambda Developer Guide*.\nSAM will automatically add appropriate permission to your Lambda function execution role to give Lambda service access to the resource. sqs:SendMessage will be added for SQS queues and sns:Publish for SNS topics.\n",
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.DeadLetterQueue`\n\nSpecifies an SQS queue or SNS topic that AWS Lambda (Lambda) sends events to when it can't process them. For more information about dead letter queue functionality, see\n[Dead-letter queues](https://docs.aws.amazon.com/lambda/latest/dg/invocation-async-retain-records.html#invocation-dlq) in the *AWS Lambda Developer Guide*.\nSAM will automatically add appropriate permission to your Lambda function execution role to give Lambda service access to the resource. sqs:SendMessage will be added for SQS queues and sns:Publish for SNS topics.\n"
    },
    "AWS::Serverless::Function.DeploymentPreference": {
      "Properties": {
        "Alarms": {
          "MarkdownDocumentation": "`Alarms`\n\nSpecifies the configurations to enable gradual Lambda deployments. For more information about configuring gradual Lambda deployments, see [Deploying serverless applications\ngradually with AWS SAM](./automating-updates-to-serverless-apps.html).\n###### Note\nYou must specify an `AutoPublishAlias` in your [AWS::Serverless::Function](./sam-resource-function.html) to use a `DeploymentPreference` object, otherwise an error will result.\n",
          "Type": "List",
          "ItemType": "string"
        },
        "Enabled": {
          "MarkdownDocumentation": "`Enabled`\n\nSpecifies the configurations to enable gradual Lambda deployments. For more information about configuring gradual Lambda deployments, see [Deploying serverless applications\ngradually with AWS SAM](./automating-updates-to-serverless-apps.html).\n###### Note\nYou must specify an `AutoPublishAlias` in your [AWS::Serverless::Function](./sam-resource-function.html) to use a `DeploymentPreference` object, otherwise an error will result.\n",
          "Type": "boolean"
        },
        "Hooks": {
          "additionalProperties": true,
          "patternProperties": {
            "^[a-zA-Z0-9]+$": {
              "type": "string"
            }
          },
          "MarkdownDocumentation": "`Hooks`\n\nSpecifies the configurations to enable gradual Lambda deployments. For more information about configuring gradual Lambda deployments, see [Deploying serverless applications\ngradually with AWS SAM](./automating-updates-to-serverless-apps.html).\n###### Note\nYou must specify an `AutoPublishAlias` in your [AWS::Serverless::Function](./sam-resource-function.html) to use a `DeploymentPreference` object, otherwise an error will result.\n",
          "Type": "object"
        },
        "Role": {
          "MarkdownDocumentation": "`Role`\n\nSpecifies the configurations to enable gradual Lambda deployments. For more information about configuring gradual Lambda deployments, see [Deploying serverless applications\ngradually with AWS SAM](./automating-updates-to-serverless-apps.html).\n###### Note\nYou must specify an `AutoPublishAlias` in your [AWS::Serverless::Function](./sam-resource-function.html) to use a `DeploymentPreference` object, otherwise an error will result.\n",
          "Type": "string"
        },
        "Type": {
          "MarkdownDocumentation": "`Type`\n\nSpecifies the configurations to enable gradual Lambda deployments. For more information about configuring gradual Lambda deployments, see [Deploying serverless applications\ngradually with AWS SAM](./automating-updates-to-serverless-apps.html).\n###### Note\nYou must specify an `AutoPublishAlias` in your [AWS::Serverless::Function](./sam-resource-function.html) to use a `DeploymentPreference` object, otherwise an error will result.\n",
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.DeploymentPreference`\n\nSpecifies the configurations to enable gradual Lambda deployments. For more information about configuring gradual Lambda deployments, see [Deploying serverless applications\ngradually with AWS SAM](./automating-updates-to-serverless-apps.html).\n###### Note\nYou must specify an `AutoPublishAlias` in your [AWS::Serverless::Function](./sam-resource-function.html) to use a `DeploymentPreference` object, otherwise an error will result.\n"
    },
    "AWS::Serverless::Function.Destination": {
      "Properties": {
        "Destination": {
          "MarkdownDocumentation": "`Destination`\n",
          "Type": "string"
        },
        "Type": {
          "MarkdownDocumentation": "`Type`\n",
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.Destination`\n"
    },
    "AWS::Serverless::Function.DestinationConfig": {
      "Properties": {
        "OnFailure": {
          "MarkdownDocumentation": "`OnFailure`\n",
          "Type": "Destination"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.DestinationConfig`\n"
    },
    "AWS::Serverless::Function.DomainSAMPT": {
      "Properties": {
        "DomainName": {
          "MarkdownDocumentation": "`DomainName`\n",
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.DomainSAMPT`\n"
    },
    "AWS::Serverless::Function.DynamoDBEvent": {
      "Properties": {
        "BatchSize": {
          "MarkdownDocumentation": "`BatchSize`\n",
          "Type": "number"
        },
        "BisectBatchOnFunctionError": {
          "MarkdownDocumentation": "`BisectBatchOnFunctionError`\n",
          "Type": "boolean"
        },
        "DestinationConfig": {
          "MarkdownDocumentation": "`DestinationConfig`\n",
          "Type": "DestinationConfig"
        },
        "Enabled": {
          "MarkdownDocumentation": "`Enabled`\n",
          "Type": "boolean"
        },
        "MaximumBatchingWindowInSeconds": {
          "MarkdownDocumentation": "`MaximumBatchingWindowInSeconds`\n",
          "Type": "number"
        },
        "MaximumRecordAgeInSeconds": {
          "MarkdownDocumentation": "`MaximumRecordAgeInSeconds`\n",
          "Type": "number"
        },
        "MaximumRetryAttempts": {
          "MarkdownDocumentation": "`MaximumRetryAttempts`\n",
          "Type": "number"
        },
        "ParallelizationFactor": {
          "MarkdownDocumentation": "`ParallelizationFactor`\n",
          "Type": "number"
        },
        "StartingPosition": {
          "MarkdownDocumentation": "`StartingPosition`\n",
          "Type": "string"
        },
        "Stream": {
          "MarkdownDocumentation": "`Stream`\n",
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.DynamoDBEvent`\n"
    },
    "AWS::Serverless::Function.EmptySAMPT": {
      "Properties": {},
      "MarkdownDocumentation": "`AWS::Serverless::Function.EmptySAMPT`\n"
    },
    "AWS::Serverless::Function.EphemeralStorage": {
      "Properties": {
        "Size": {
          "MarkdownDocumentation": "`Size`\n\nThe size of the function's `/tmp` directory in MB. The default value is 512,\nbut it can be any whole number between 512 and 10,240 MB.\n*Required*: No\n*Type*: [EphemeralStorage](./aws-properties-lambda-function-ephemeralstorage.html)\n*Update requires*: [No interruption](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-updating-stacks-update-behaviors.html#update-no-interrupt)\n",
          "Type": "number"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.EphemeralStorage`\n\nThe size of the function's `/tmp` directory in MB. The default value is 512,\nbut it can be any whole number between 512 and 10,240 MB.\n*Required*: No\n*Type*: [EphemeralStorage](./aws-properties-lambda-function-ephemeralstorage.html)\n*Update requires*: [No interruption](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-updating-stacks-update-behaviors.html#update-no-interrupt)\n"
    },
    "AWS::Serverless::Function.EventBridgeRuleEvent": {
      "Properties": {
        "EventBusName": {
          "MarkdownDocumentation": "`EventBusName`\n",
          "Type": "string"
        },
        "Input": {
          "MarkdownDocumentation": "`Input`\n",
          "Type": "string"
        },
        "InputPath": {
          "MarkdownDocumentation": "`InputPath`\n",
          "Type": "string"
        },
        "Pattern": {
          "MarkdownDocumentation": "`Pattern`\n",
          "Type": "object"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.EventBridgeRuleEvent`\n"
    },
    "AWS::Serverless::Function.EventInvokeConfig": {
      "Properties": {
        "DestinationConfig": {
          "MarkdownDocumentation": "`DestinationConfig`\n",
          "Type": "EventInvokeDestinationConfig"
        },
        "MaximumEventAgeInSeconds": {
          "MarkdownDocumentation": "`MaximumEventAgeInSeconds`\n",
          "Type": "number"
        },
        "MaximumRetryAttempts": {
          "MarkdownDocumentation": "`MaximumRetryAttempts`\n",
          "Type": "number"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.EventInvokeConfig`\n"
    },
    "AWS::Serverless::Function.EventInvokeDestinationConfig": {
      "Properties": {
        "OnFailure": {
          "MarkdownDocumentation": "`OnFailure`\n",
          "Type": "Destination"
        },
        "OnSuccess": {
          "MarkdownDocumentation": "`OnSuccess`\n",
          "Type": "Destination"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.EventInvokeDestinationConfig`\n"
    },
    "AWS::Serverless::Function.EventSource": {
      "Properties": {
        "Properties": {
          "MarkdownDocumentation": "`Properties`\n\nThe object describing the source of events which trigger the function. Each event consists\nof a type and a set of properties that depend on that type. For more information about the\nproperties of each event source, see the topic corresponding to that type.\n",
          "Type": "S3Event"
        },
        "Type": {
          "MarkdownDocumentation": "`Type`\n\nThe object describing the source of events which trigger the function. Each event consists\nof a type and a set of properties that depend on that type. For more information about the\nproperties of each event source, see the topic corresponding to that type.\n",
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.EventSource`\n\nThe object describing the source of events which trigger the function. Each event consists\nof a type and a set of properties that depend on that type. For more information about the\nproperties of each event source, see the topic corresponding to that type.\n"
    },
    "AWS::Serverless::Function.FileSystemConfig": {
      "Properties": {
        "Arn": {
          "MarkdownDocumentation": "`Arn`\n",
          "Type": "string"
        },
        "LocalMountPath": {
          "MarkdownDocumentation": "`LocalMountPath`\n",
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.FileSystemConfig`\n"
    },
    "AWS::Serverless::Function.FunctionEnvironment": {
      "Properties": {
        "Variables": {
          "additionalProperties": true,
          "patternProperties": {
            "^[a-zA-Z0-9]+$": {
              "type": "string"
            }
          },
          "MarkdownDocumentation": "`Variables`\n",
          "Type": "object"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.FunctionEnvironment`\n"
    },
    "AWS::Serverless::Function.FunctionSAMPT": {
      "Properties": {
        "FunctionName": {
          "MarkdownDocumentation": "`FunctionName`\n",
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.FunctionSAMPT`\n"
    },
    "AWS::Serverless::Function.FunctionUrlConfig": {
      "Properties": {
        "AuthType": {
          "MarkdownDocumentation": "`AuthType`\n\nCreates an AWS Lambda function URL with the specified configuration parameters. A Lambda\nfunction URL is an HTTPS endpoint that you can use to invoke your function.\nBy default, the function URL that you create uses the `$LATEST` version of your\nLambda function. If you specify an `AutoPublishAlias` for your Lambda function, the\nendpoint connects to the specified function alias.\nFor more information, see [Lambda function URLs](https://docs.aws.amazon.com/lambda/latest/dg/lambda-urls.html) in the *AWS Lambda Developer Guide*.\n",
          "Type": "string"
        },
        "Cors": {
          "MarkdownDocumentation": "`Cors`\n\nCreates an AWS Lambda function URL with the specified configuration parameters. A Lambda\nfunction URL is an HTTPS endpoint that you can use to invoke your function.\nBy default, the function URL that you create uses the `$LATEST` version of your\nLambda function. If you specify an `AutoPublishAlias` for your Lambda function, the\nendpoint connects to the specified function alias.\nFor more information, see [Lambda function URLs](https://docs.aws.amazon.com/lambda/latest/dg/lambda-urls.html) in the *AWS Lambda Developer Guide*.\n",
          "Type": "CorsConfiguration"
        },
        "InvokeMode": {
          "MarkdownDocumentation": "`InvokeMode`\n\nCreates an AWS Lambda function URL with the specified configuration parameters. A Lambda\nfunction URL is an HTTPS endpoint that you can use to invoke your function.\nBy default, the function URL that you create uses the `$LATEST` version of your\nLambda function. If you specify an `AutoPublishAlias` for your Lambda function, the\nendpoint connects to the specified function alias.\nFor more information, see [Lambda function URLs](https://docs.aws.amazon.com/lambda/latest/dg/lambda-urls.html) in the *AWS Lambda Developer Guide*.\n",
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.FunctionUrlConfig`\n\nCreates an AWS Lambda function URL with the specified configuration parameters. A Lambda\nfunction URL is an HTTPS endpoint that you can use to invoke your function.\nBy default, the function URL that you create uses the `$LATEST` version of your\nLambda function. If you specify an `AutoPublishAlias` for your Lambda function, the\nendpoint connects to the specified function alias.\nFor more information, see [Lambda function URLs](https://docs.aws.amazon.com/lambda/latest/dg/lambda-urls.html) in the *AWS Lambda Developer Guide*.\n"
    },
    "AWS::Serverless::Function.HttpApiEvent": {
      "Properties": {
        "ApiId": {
          "MarkdownDocumentation": "`ApiId`\n",
          "Type": "string"
        },
        "Auth": {
          "MarkdownDocumentation": "`Auth`\n",
          "Type": "HttpApiFunctionAuth"
        },
        "Method": {
          "MarkdownDocumentation": "`Method`\n",
          "Type": "string"
        },
        "Path": {
          "MarkdownDocumentation": "`Path`\n",
          "Type": "string"
        },
        "PayloadFormatVersion": {
          "MarkdownDocumentation": "`PayloadFormatVersion`\n",
          "Type": "string"
        },
        "RouteSettings": {
          "MarkdownDocumentation": "`RouteSettings`\n",
          "Type": "RouteSettings"
        },
        "TimeoutInMillis": {
          "MarkdownDocumentation": "`TimeoutInMillis`\n",
          "Type": "number"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.HttpApiEvent`\n"
    },
    "AWS::Serverless::Function.HttpApiFunctionAuth": {
      "Properties": {
        "AuthorizationScopes": {
          "MarkdownDocumentation": "`AuthorizationScopes`\n\nConfigures authorization at the event level.\nConfigure Auth for a specific API + Path + Method\n",
          "Type": "List",
          "ItemType": "string"
        },
        "Authorizer": {
          "MarkdownDocumentation": "`Authorizer`\n\nConfigures authorization at the event level.\nConfigure Auth for a specific API + Path + Method\n",
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.HttpApiFunctionAuth`\n\nConfigures authorization at the event level.\nConfigure Auth for a specific API + Path + Method\n"
    },
    "AWS::Serverless::Function.IAMPolicyDocument": {
      "Properties": {
        "Statement": {
          "MarkdownDocumentation": "`Statement`\n",
          "Type": "List",
          "ItemType": "object"
        },
        "Version": {
          "MarkdownDocumentation": "`Version`\n",
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.IAMPolicyDocument`\n"
    },
    "AWS::Serverless::Function.IdentitySAMPT": {
      "Properties": {
        "IdentityName": {
          "MarkdownDocumentation": "`IdentityName`\n",
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.IdentitySAMPT`\n"
    },
    "AWS::Serverless::Function.ImageConfig": {
      "Properties": {
        "Command": {
          "MarkdownDocumentation": "`Command`\n\nConfiguration values that override the container image Dockerfile settings. For more information, see [Container image\nsettings](https://docs.aws.amazon.com/lambda/latest/dg/images-create.html#images-parms).\n*Required*: No\n*Type*: [ImageConfig](./aws-properties-lambda-function-imageconfig.html)\n*Update requires*: [No interruption](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-updating-stacks-update-behaviors.html#update-no-interrupt)\n",
          "Type": "List",
          "ItemType": "string"
        },
        "EntryPoint": {
          "MarkdownDocumentation": "`EntryPoint`\n\nConfiguration values that override the container image Dockerfile settings. For more information, see [Container image\nsettings](https://docs.aws.amazon.com/lambda/latest/dg/images-create.html#images-parms).\n*Required*: No\n*Type*: [ImageConfig](./aws-properties-lambda-function-imageconfig.html)\n*Update requires*: [No interruption](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-updating-stacks-update-behaviors.html#update-no-interrupt)\n",
          "Type": "List",
          "ItemType": "string"
        },
        "WorkingDirectory": {
          "MarkdownDocumentation": "`WorkingDirectory`\n\nConfiguration values that override the container image Dockerfile settings. For more information, see [Container image\nsettings](https://docs.aws.amazon.com/lambda/latest/dg/images-create.html#images-parms).\n*Required*: No\n*Type*: [ImageConfig](./aws-properties-lambda-function-imageconfig.html)\n*Update requires*: [No interruption](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-updating-stacks-update-behaviors.html#update-no-interrupt)\n",
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.ImageConfig`\n\nConfiguration values that override the container image Dockerfile settings. For more information, see [Container image\nsettings](https://docs.aws.amazon.com/lambda/latest/dg/images-create.html#images-parms).\n*Required*: No\n*Type*: [ImageConfig](./aws-properties-lambda-function-imageconfig.html)\n*Update requires*: [No interruption](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-updating-stacks-update-behaviors.html#update-no-interrupt)\n"
    },
    "AWS::Serverless::Function.IoTRuleEvent": {
      "Properties": {
        "AwsIotSqlVersion": {
          "MarkdownDocumentation": "`AwsIotSqlVersion`\n",
          "Type": "string"
        },
        "Sql": {
          "MarkdownDocumentation": "`Sql`\n",
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.IoTRuleEvent`\n"
    },
    "AWS::Serverless::Function.KeySAMPT": {
      "Properties": {
        "KeyId": {
          "MarkdownDocumentation": "`KeyId`\n",
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.KeySAMPT`\n"
    },
    "AWS::Serverless::Function.KinesisEvent": {
      "Properties": {
        "BatchSize": {
          "MarkdownDocumentation": "`BatchSize`\n",
          "Type": "number"
        },
        "Enabled": {
          "MarkdownDocumentation": "`Enabled`\n",
          "Type": "boolean"
        },
        "FunctionResponseTypes": {
          "MarkdownDocumentation": "`FunctionResponseTypes`\n",
          "Type": "List",
          "ItemType": "string"
        },
        "StartingPosition": {
          "MarkdownDocumentation": "`StartingPosition`\n",
          "Type": "string"
        },
        "Stream": {
          "MarkdownDocumentation": "`Stream`\n",
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.KinesisEvent`\n"
    },
    "AWS::Serverless::Function.LogGroupSAMPT": {
      "Properties": {
        "LogGroupName": {
          "MarkdownDocumentation": "`LogGroupName`\n",
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.LogGroupSAMPT`\n"
    },
    "AWS::Serverless::Function.ParameterNameSAMPT": {
      "Properties": {
        "ParameterName": {
          "MarkdownDocumentation": "`ParameterName`\n",
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.ParameterNameSAMPT`\n"
    },
    "AWS::Serverless::Function.ProvisionedConcurrencyConfig": {
      "Properties": {
        "ProvisionedConcurrentExecutions": {
          "MarkdownDocumentation": "`ProvisionedConcurrentExecutions`\n\nSpecifies a [provisioned concurrency](https://docs.aws.amazon.com/lambda/latest/dg/configuration-concurrency.html) configuration for a function's alias.\n*Required*: No\n*Type*: [ProvisionedConcurrencyConfiguration](./aws-properties-lambda-alias-provisionedconcurrencyconfiguration.html)\n*Update requires*: [No interruption](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-updating-stacks-update-behaviors.html#update-no-interrupt)\n",
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.ProvisionedConcurrencyConfig`\n\nSpecifies a [provisioned concurrency](https://docs.aws.amazon.com/lambda/latest/dg/configuration-concurrency.html) configuration for a function's alias.\n*Required*: No\n*Type*: [ProvisionedConcurrencyConfiguration](./aws-properties-lambda-alias-provisionedconcurrencyconfiguration.html)\n*Update requires*: [No interruption](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-updating-stacks-update-behaviors.html#update-no-interrupt)\n"
    },
    "AWS::Serverless::Function.QueueSAMPT": {
      "Properties": {
        "QueueName": {
          "MarkdownDocumentation": "`QueueName`\n",
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.QueueSAMPT`\n"
    },
    "AWS::Serverless::Function.RequestModel": {
      "Properties": {
        "Model": {
          "MarkdownDocumentation": "`Model`\n\nConfigures a Request Model for a specific Api+Path+Method.\n",
          "Type": "string"
        },
        "Required": {
          "MarkdownDocumentation": "`Required`\n\nConfigures a Request Model for a specific Api+Path+Method.\n",
          "Type": "boolean"
        },
        "ValidateBody": {
          "MarkdownDocumentation": "`ValidateBody`\n\nConfigures a Request Model for a specific Api+Path+Method.\n",
          "Type": "boolean"
        },
        "ValidateParameters": {
          "MarkdownDocumentation": "`ValidateParameters`\n\nConfigures a Request Model for a specific Api+Path+Method.\n",
          "Type": "boolean"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.RequestModel`\n\nConfigures a Request Model for a specific Api+Path+Method.\n"
    },
    "AWS::Serverless::Function.RequestParameter": {
      "Properties": {
        "Caching": {
          "MarkdownDocumentation": "`Caching`\n\nConfigure Request Parameter for a specific Api+Path+Method.\nEither `Required` or `Caching` property needs to be specified for request parameter\n",
          "Type": "boolean"
        },
        "Required": {
          "MarkdownDocumentation": "`Required`\n\nConfigure Request Parameter for a specific Api+Path+Method.\nEither `Required` or `Caching` property needs to be specified for request parameter\n",
          "Type": "boolean"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.RequestParameter`\n\nConfigure Request Parameter for a specific Api+Path+Method.\nEither `Required` or `Caching` property needs to be specified for request parameter\n"
    },
    "AWS::Serverless::Function.RouteSettings": {
      "Properties": {
        "DataTraceEnabled": {
          "MarkdownDocumentation": "`DataTraceEnabled`\n",
          "Type": "boolean"
        },
        "DetailedMetricsEnabled": {
          "MarkdownDocumentation": "`DetailedMetricsEnabled`\n",
          "Type": "boolean"
        },
        "LoggingLevel": {
          "MarkdownDocumentation": "`LoggingLevel`\n",
          "Type": "string"
        },
        "ThrottlingBurstLimit": {
          "MarkdownDocumentation": "`ThrottlingBurstLimit`\n",
          "Type": "number"
        },
        "ThrottlingRateLimit": {
          "MarkdownDocumentation": "`ThrottlingRateLimit`\n",
          "Type": "number"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.RouteSettings`\n"
    },
    "AWS::Serverless::Function.S3Event": {
      "Properties": {
        "Bucket": {
          "MarkdownDocumentation": "`Bucket`\n",
          "Type": "string"
        },
        "Events": {
          "MarkdownDocumentation": "`Events`\n",
          "Type": {
            "type": [
              "string"
            ]
          }
        },
        "Filter": {
          "MarkdownDocumentation": "`Filter`\n",
          "Type": "S3NotificationFilter"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.S3Event`\n"
    },
    "AWS::Serverless::Function.S3KeyFilter": {
      "Properties": {
        "Rules": {
          "MarkdownDocumentation": "`Rules`\n",
          "Type": "List",
          "ItemType": "S3KeyFilterRule"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.S3KeyFilter`\n"
    },
    "AWS::Serverless::Function.S3KeyFilterRule": {
      "Properties": {
        "Name": {
          "MarkdownDocumentation": "`Name`\n",
          "Type": "string"
        },
        "Value": {
          "MarkdownDocumentation": "`Value`\n",
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.S3KeyFilterRule`\n"
    },
    "AWS::Serverless::Function.S3Location": {
      "Properties": {
        "Bucket": {
          "MarkdownDocumentation": "`Bucket`\n",
          "Type": "string"
        },
        "Key": {
          "MarkdownDocumentation": "`Key`\n",
          "Type": "string"
        },
        "Version": {
          "MarkdownDocumentation": "`Version`\n",
          "Type": "number"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.S3Location`\n"
    },
    "AWS::Serverless::Function.S3NotificationFilter": {
      "Properties": {
        "S3Key": {
          "MarkdownDocumentation": "`S3Key`\n",
          "Type": "S3KeyFilter"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.S3NotificationFilter`\n"
    },
    "AWS::Serverless::Function.SAMPolicyTemplate": {
      "Properties": {
        "AMIDescribePolicy": {
          "MarkdownDocumentation": "`AMIDescribePolicy`\n",
          "Type": "EmptySAMPT"
        },
        "AWSSecretsManagerGetSecretValuePolicy": {
          "MarkdownDocumentation": "`AWSSecretsManagerGetSecretValuePolicy`\n",
          "Type": "SecretArnSAMPT"
        },
        "CloudFormationDescribeStacksPolicy": {
          "MarkdownDocumentation": "`CloudFormationDescribeStacksPolicy`\n",
          "Type": "EmptySAMPT"
        },
        "CloudWatchPutMetricPolicy": {
          "MarkdownDocumentation": "`CloudWatchPutMetricPolicy`\n",
          "Type": "EmptySAMPT"
        },
        "DynamoDBCrudPolicy": {
          "MarkdownDocumentation": "`DynamoDBCrudPolicy`\n",
          "Type": "TableSAMPT"
        },
        "DynamoDBReadPolicy": {
          "MarkdownDocumentation": "`DynamoDBReadPolicy`\n",
          "Type": "TableSAMPT"
        },
        "DynamoDBStreamReadPolicy": {
          "MarkdownDocumentation": "`DynamoDBStreamReadPolicy`\n",
          "Type": "TableStreamSAMPT"
        },
        "DynamoDBWritePolicy": {
          "MarkdownDocumentation": "`DynamoDBWritePolicy`\n",
          "Type": "TableSAMPT"
        },
        "EC2DescribePolicy": {
          "MarkdownDocumentation": "`EC2DescribePolicy`\n",
          "Type": "EmptySAMPT"
        },
        "ElasticsearchHttpPostPolicy": {
          "MarkdownDocumentation": "`ElasticsearchHttpPostPolicy`\n",
          "Type": "DomainSAMPT"
        },
        "FilterLogEventsPolicy": {
          "MarkdownDocumentation": "`FilterLogEventsPolicy`\n",
          "Type": "LogGroupSAMPT"
        },
        "KMSDecryptPolicy": {
          "MarkdownDocumentation": "`KMSDecryptPolicy`\n",
          "Type": "KeySAMPT"
        },
        "KinesisCrudPolicy": {
          "MarkdownDocumentation": "`KinesisCrudPolicy`\n",
          "Type": "StreamSAMPT"
        },
        "KinesisStreamReadPolicy": {
          "MarkdownDocumentation": "`KinesisStreamReadPolicy`\n",
          "Type": "StreamSAMPT"
        },
        "LambdaInvokePolicy": {
          "MarkdownDocumentation": "`LambdaInvokePolicy`\n",
          "Type": "FunctionSAMPT"
        },
        "RekognitionDetectOnlyPolicy": {
          "MarkdownDocumentation": "`RekognitionDetectOnlyPolicy`\n",
          "Type": "EmptySAMPT"
        },
        "RekognitionLabelsPolicy": {
          "MarkdownDocumentation": "`RekognitionLabelsPolicy`\n",
          "Type": "EmptySAMPT"
        },
        "RekognitionNoDataAccessPolicy": {
          "MarkdownDocumentation": "`RekognitionNoDataAccessPolicy`\n",
          "Type": "CollectionSAMPT"
        },
        "RekognitionReadPolicy": {
          "MarkdownDocumentation": "`RekognitionReadPolicy`\n",
          "Type": "CollectionSAMPT"
        },
        "RekognitionWriteOnlyAccessPolicy": {
          "MarkdownDocumentation": "`RekognitionWriteOnlyAccessPolicy`\n",
          "Type": "CollectionSAMPT"
        },
        "S3CrudPolicy": {
          "MarkdownDocumentation": "`S3CrudPolicy`\n",
          "Type": "BucketSAMPT"
        },
        "S3ReadPolicy": {
          "MarkdownDocumentation": "`S3ReadPolicy`\n",
          "Type": "BucketSAMPT"
        },
        "S3WritePolicy": {
          "MarkdownDocumentation": "`S3WritePolicy`\n",
          "Type": "BucketSAMPT"
        },
        "SESBulkTemplatedCrudPolicy": {
          "MarkdownDocumentation": "`SESBulkTemplatedCrudPolicy`\n",
          "Type": "IdentitySAMPT"
        },
        "SESCrudPolicy": {
          "MarkdownDocumentation": "`SESCrudPolicy`\n",
          "Type": "IdentitySAMPT"
        },
        "SESEmailTemplateCrudPolicy": {
          "MarkdownDocumentation": "`SESEmailTemplateCrudPolicy`\n",
          "Type": "EmptySAMPT"
        },
        "SESSendBouncePolicy": {
          "MarkdownDocumentation": "`SESSendBouncePolicy`\n",
          "Type": "IdentitySAMPT"
        },
        "SNSCrudPolicy": {
          "MarkdownDocumentation": "`SNSCrudPolicy`\n",
          "Type": "TopicSAMPT"
        },
        "SNSPublishMessagePolicy": {
          "MarkdownDocumentation": "`SNSPublishMessagePolicy`\n",
          "Type": "TopicSAMPT"
        },
        "SQSPollerPolicy": {
          "MarkdownDocumentation": "`SQSPollerPolicy`\n",
          "Type": "QueueSAMPT"
        },
        "SQSSendMessagePolicy": {
          "MarkdownDocumentation": "`SQSSendMessagePolicy`\n",
          "Type": "QueueSAMPT"
        },
        "SSMParameterReadPolicy": {
          "MarkdownDocumentation": "`SSMParameterReadPolicy`\n",
          "Type": "ParameterNameSAMPT"
        },
        "StepFunctionsExecutionPolicy": {
          "MarkdownDocumentation": "`StepFunctionsExecutionPolicy`\n",
          "Type": "StateMachineSAMPT"
        },
        "VPCAccessPolicy": {
          "MarkdownDocumentation": "`VPCAccessPolicy`\n",
          "Type": "EmptySAMPT"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.SAMPolicyTemplate`\n"
    },
    "AWS::Serverless::Function.SNSEvent": {
      "Properties": {
        "Topic": {
          "MarkdownDocumentation": "`Topic`\n",
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.SNSEvent`\n"
    },
    "AWS::Serverless::Function.SQSEvent": {
      "Properties": {
        "BatchSize": {
          "MarkdownDocumentation": "`BatchSize`\n",
          "Type": "number"
        },
        "Enabled": {
          "MarkdownDocumentation": "`Enabled`\n",
          "Type": "boolean"
        },
        "Queue": {
          "MarkdownDocumentation": "`Queue`\n",
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.SQSEvent`\n"
    },
    "AWS::Serverless::Function.ScheduleEvent": {
      "Properties": {
        "Description": {
          "MarkdownDocumentation": "`Description`\n",
          "Type": "string"
        },
        "Enabled": {
          "MarkdownDocumentation": "`Enabled`\n",
          "Type": "boolean"
        },
        "Input": {
          "MarkdownDocumentation": "`Input`\n",
          "Type": "string"
        },
        "Name": {
          "MarkdownDocumentation": "`Name`\n",
          "Type": "string"
        },
        "Schedule": {
          "MarkdownDocumentation": "`Schedule`\n",
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.ScheduleEvent`\n"
    },
    "AWS::Serverless::Function.SecretArnSAMPT": {
      "Properties": {
        "SecretArn": {
          "MarkdownDocumentation": "`SecretArn`\n",
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.SecretArnSAMPT`\n"
    },
    "AWS::Serverless::Function.StateMachineSAMPT": {
      "Properties": {
        "StateMachineName": {
          "MarkdownDocumentation": "`StateMachineName`\n",
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.StateMachineSAMPT`\n"
    },
    "AWS::Serverless::Function.StreamSAMPT": {
      "Properties": {
        "StreamName": {
          "MarkdownDocumentation": "`StreamName`\n",
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.StreamSAMPT`\n"
    },
    "AWS::Serverless::Function.TableSAMPT": {
      "Properties": {
        "TableName": {
          "MarkdownDocumentation": "`TableName`\n",
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.TableSAMPT`\n"
    },
    "AWS::Serverless::Function.TableStreamSAMPT": {
      "Properties": {
        "StreamName": {
          "MarkdownDocumentation": "`StreamName`\n",
          "Type": "string"
        },
        "TableName": {
          "MarkdownDocumentation": "`TableName`\n",
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.TableStreamSAMPT`\n"
    },
    "AWS::Serverless::Function.TopicSAMPT": {
      "Properties": {
        "TopicName": {
          "MarkdownDocumentation": "`TopicName`\n",
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.TopicSAMPT`\n"
    },
    "AWS::Serverless::Function.VpcConfig": {
      "Properties": {
        "SecurityGroupIds": {
          "MarkdownDocumentation": "`SecurityGroupIds`\n",
          "Type": "List",
          "ItemType": "string"
        },
        "SubnetIds": {
          "MarkdownDocumentation": "`SubnetIds`\n",
          "Type": "List",
          "ItemType": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::Function.VpcConfig`\n"
    },
    "AWS::Serverless::HttpApi.AccessLogSetting": {
      "Properties": {
        "DestinationArn": {
          "MarkdownDocumentation": "`DestinationArn`\n",
          "Type": "string"
        },
        "Format": {
          "MarkdownDocumentation": "`Format`\n",
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::HttpApi.AccessLogSetting`\n"
    },
    "AWS::Serverless::HttpApi.CorsConfigurationObject": {
      "Properties": {
        "AllowCredentials": {
          "MarkdownDocumentation": "`AllowCredentials`\n",
          "Type": "boolean"
        },
        "AllowHeaders": {
          "MarkdownDocumentation": "`AllowHeaders`\n",
          "Type": "List",
          "ItemType": "string"
        },
        "AllowMethods": {
          "MarkdownDocumentation": "`AllowMethods`\n",
          "Type": "List",
          "ItemType": "string"
        },
        "AllowOrigins": {
          "MarkdownDocumentation": "`AllowOrigins`\n",
          "Type": "List",
          "ItemType": "string"
        },
        "ExposeHeaders": {
          "MarkdownDocumentation": "`ExposeHeaders`\n",
          "Type": "List",
          "ItemType": "string"
        },
        "MaxAge": {
          "MarkdownDocumentation": "`MaxAge`\n",
          "Type": "number"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::HttpApi.CorsConfigurationObject`\n"
    },
    "AWS::Serverless::HttpApi.HttpApiAuth": {
      "Properties": {
        "Authorizers": {
          "MarkdownDocumentation": "`Authorizers`\n\nConfigure authorization to control access to your Amazon API Gateway HTTP API.\nFor more information about configuring access to HTTP APIs, see [Controlling and managing access to an HTTP API in API Gateway](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-access-control.html) in the *API Gateway Developer Guide*.\n",
          "Type": "object"
        },
        "DefaultAuthorizer": {
          "MarkdownDocumentation": "`DefaultAuthorizer`\n\nConfigure authorization to control access to your Amazon API Gateway HTTP API.\nFor more information about configuring access to HTTP APIs, see [Controlling and managing access to an HTTP API in API Gateway](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-access-control.html) in the *API Gateway Developer Guide*.\n",
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::HttpApi.HttpApiAuth`\n\nConfigure authorization to control access to your Amazon API Gateway HTTP API.\nFor more information about configuring access to HTTP APIs, see [Controlling and managing access to an HTTP API in API Gateway](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-access-control.html) in the *API Gateway Developer Guide*.\n"
    },
    "AWS::Serverless::HttpApi.HttpApiDomainConfiguration": {
      "Properties": {
        "BasePath": {
          "MarkdownDocumentation": "`BasePath`\n\nConfigures a custom domain for an API.\n",
          "Type": "string"
        },
        "CertificateArn": {
          "MarkdownDocumentation": "`CertificateArn`\n\nConfigures a custom domain for an API.\n",
          "Type": "string"
        },
        "DomainName": {
          "MarkdownDocumentation": "`DomainName`\n\nConfigures a custom domain for an API.\n",
          "Type": "string"
        },
        "EndpointConfiguration": {
          "MarkdownDocumentation": "`EndpointConfiguration`\n\nConfigures a custom domain for an API.\n",
          "Type": "string"
        },
        "MutualTlsAuthentication": {
          "MarkdownDocumentation": "`MutualTlsAuthentication`\n\nConfigures a custom domain for an API.\n",
          "Type": "MutualTlsAuthentication"
        },
        "Route53": {
          "MarkdownDocumentation": "`Route53`\n\nConfigures a custom domain for an API.\n",
          "Type": "Route53Configuration"
        },
        "SecurityPolicy": {
          "MarkdownDocumentation": "`SecurityPolicy`\n\nConfigures a custom domain for an API.\n",
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::HttpApi.HttpApiDomainConfiguration`\n\nConfigures a custom domain for an API.\n"
    },
    "AWS::Serverless::HttpApi.MutualTlsAuthentication": {
      "Properties": {
        "TruststoreUri": {
          "MarkdownDocumentation": "`TruststoreUri`\n",
          "Type": "string"
        },
        "TruststoreVersion": {
          "MarkdownDocumentation": "`TruststoreVersion`\n",
          "Type": "boolean"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::HttpApi.MutualTlsAuthentication`\n"
    },
    "AWS::Serverless::HttpApi.Route53Configuration": {
      "Properties": {
        "DistributedDomainName": {
          "MarkdownDocumentation": "`DistributedDomainName`\n\nConfigures the Route53 record sets for an API.\n",
          "Type": "string"
        },
        "EvaluateTargetHealth": {
          "MarkdownDocumentation": "`EvaluateTargetHealth`\n\nConfigures the Route53 record sets for an API.\n",
          "Type": "boolean"
        },
        "HostedZoneId": {
          "MarkdownDocumentation": "`HostedZoneId`\n\nConfigures the Route53 record sets for an API.\n",
          "Type": "string"
        },
        "HostedZoneName": {
          "MarkdownDocumentation": "`HostedZoneName`\n\nConfigures the Route53 record sets for an API.\n",
          "Type": "string"
        },
        "IpV6": {
          "MarkdownDocumentation": "`IpV6`\n\nConfigures the Route53 record sets for an API.\n",
          "Type": "boolean"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::HttpApi.Route53Configuration`\n\nConfigures the Route53 record sets for an API.\n"
    },
    "AWS::Serverless::HttpApi.RouteSettings": {
      "Properties": {
        "DataTraceEnabled": {
          "MarkdownDocumentation": "`DataTraceEnabled`\n\nRoute settings for the stage.\n*Required*: No\n*Type*: [Json](./aws-properties-apigatewayv2-stage-routesettings.html)\n*Update requires*: [No interruption](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-updating-stacks-update-behaviors.html#update-no-interrupt)\n",
          "Type": "boolean"
        },
        "DetailedMetricsEnabled": {
          "MarkdownDocumentation": "`DetailedMetricsEnabled`\n\nRoute settings for the stage.\n*Required*: No\n*Type*: [Json](./aws-properties-apigatewayv2-stage-routesettings.html)\n*Update requires*: [No interruption](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-updating-stacks-update-behaviors.html#update-no-interrupt)\n",
          "Type": "boolean"
        },
        "LoggingLevel": {
          "MarkdownDocumentation": "`LoggingLevel`\n\nRoute settings for the stage.\n*Required*: No\n*Type*: [Json](./aws-properties-apigatewayv2-stage-routesettings.html)\n*Update requires*: [No interruption](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-updating-stacks-update-behaviors.html#update-no-interrupt)\n",
          "Type": "string"
        },
        "ThrottlingBurstLimit": {
          "MarkdownDocumentation": "`ThrottlingBurstLimit`\n\nRoute settings for the stage.\n*Required*: No\n*Type*: [Json](./aws-properties-apigatewayv2-stage-routesettings.html)\n*Update requires*: [No interruption](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-updating-stacks-update-behaviors.html#update-no-interrupt)\n",
          "Type": "number"
        },
        "ThrottlingRateLimit": {
          "MarkdownDocumentation": "`ThrottlingRateLimit`\n\nRoute settings for the stage.\n*Required*: No\n*Type*: [Json](./aws-properties-apigatewayv2-stage-routesettings.html)\n*Update requires*: [No interruption](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-updating-stacks-update-behaviors.html#update-no-interrupt)\n",
          "Type": "number"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::HttpApi.RouteSettings`\n\nRoute settings for the stage.\n*Required*: No\n*Type*: [Json](./aws-properties-apigatewayv2-stage-routesettings.html)\n*Update requires*: [No interruption](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-updating-stacks-update-behaviors.html#update-no-interrupt)\n"
    },
    "AWS::Serverless::HttpApi.S3Location": {
      "Properties": {
        "Bucket": {
          "MarkdownDocumentation": "`Bucket`\n",
          "Type": "string"
        },
        "Key": {
          "MarkdownDocumentation": "`Key`\n",
          "Type": "string"
        },
        "Version": {
          "MarkdownDocumentation": "`Version`\n",
          "Type": "number"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::HttpApi.S3Location`\n"
    },
    "AWS::Serverless::LayerVersion.S3Location": {
      "Properties": {
        "Bucket": {
          "MarkdownDocumentation": "`Bucket`\n",
          "Type": "string"
        },
        "Key": {
          "MarkdownDocumentation": "`Key`\n",
          "Type": "string"
        },
        "Version": {
          "MarkdownDocumentation": "`Version`\n",
          "Type": "number"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::LayerVersion.S3Location`\n"
    },
    "AWS::Serverless::SimpleTable.PrimaryKey": {
      "Properties": {
        "Name": {
          "MarkdownDocumentation": "`Name`\n",
          "Type": "string"
        },
        "Type": {
          "MarkdownDocumentation": "`Type`\n",
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::SimpleTable.PrimaryKey`\n"
    },
    "AWS::Serverless::SimpleTable.ProvisionedThroughput": {
      "Properties": {
        "ReadCapacityUnits": {
          "MarkdownDocumentation": "`ReadCapacityUnits`\n",
          "Type": "number"
        },
        "WriteCapacityUnits": {
          "MarkdownDocumentation": "`WriteCapacityUnits`\n",
          "Type": "number"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::SimpleTable.ProvisionedThroughput`\n"
    },
    "AWS::Serverless::SimpleTable.SSESpecification": {
      "Properties": {
        "SSEEnabled": {
          "MarkdownDocumentation": "`SSEEnabled`\n",
          "Type": "boolean"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::SimpleTable.SSESpecification`\n"
    },
    "AWS::Serverless::StateMachine.ApiEvent": {
      "Properties": {
        "Method": {
          "MarkdownDocumentation": "`Method`\n",
          "Type": "string"
        },
        "Path": {
          "MarkdownDocumentation": "`Path`\n",
          "Type": "string"
        },
        "RestApiId": {
          "MarkdownDocumentation": "`RestApiId`\n",
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::StateMachine.ApiEvent`\n"
    },
    "AWS::Serverless::StateMachine.CloudWatchEventEvent": {
      "Properties": {
        "EventBusName": {
          "MarkdownDocumentation": "`EventBusName`\n",
          "Type": "string"
        },
        "Input": {
          "MarkdownDocumentation": "`Input`\n",
          "Type": "string"
        },
        "InputPath": {
          "MarkdownDocumentation": "`InputPath`\n",
          "Type": "string"
        },
        "Pattern": {
          "MarkdownDocumentation": "`Pattern`\n",
          "Type": "object"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::StateMachine.CloudWatchEventEvent`\n"
    },
    "AWS::Serverless::StateMachine.CloudWatchLogsLogGroup": {
      "Properties": {
        "LogGroupArn": {
          "MarkdownDocumentation": "`LogGroupArn`\n",
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::StateMachine.CloudWatchLogsLogGroup`\n"
    },
    "AWS::Serverless::StateMachine.EventBridgeRuleEvent": {
      "Properties": {
        "EventBusName": {
          "MarkdownDocumentation": "`EventBusName`\n",
          "Type": "string"
        },
        "Input": {
          "MarkdownDocumentation": "`Input`\n",
          "Type": "string"
        },
        "InputPath": {
          "MarkdownDocumentation": "`InputPath`\n",
          "Type": "string"
        },
        "Pattern": {
          "MarkdownDocumentation": "`Pattern`\n",
          "Type": "object"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::StateMachine.EventBridgeRuleEvent`\n"
    },
    "AWS::Serverless::StateMachine.EventSource": {
      "Properties": {
        "Properties": {
          "MarkdownDocumentation": "`Properties`\n",
          "Type": "CloudWatchEventEvent"
        },
        "Type": {
          "MarkdownDocumentation": "`Type`\n",
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::StateMachine.EventSource`\n"
    },
    "AWS::Serverless::StateMachine.FunctionSAMPT": {
      "Properties": {
        "FunctionName": {
          "MarkdownDocumentation": "`FunctionName`\n",
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::StateMachine.FunctionSAMPT`\n"
    },
    "AWS::Serverless::StateMachine.IAMPolicyDocument": {
      "Properties": {
        "Statement": {
          "MarkdownDocumentation": "`Statement`\n",
          "Type": "List",
          "ItemType": "object"
        },
        "Version": {
          "MarkdownDocumentation": "`Version`\n",
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::StateMachine.IAMPolicyDocument`\n"
    },
    "AWS::Serverless::StateMachine.LogDestination": {
      "Properties": {
        "CloudWatchLogsLogGroup": {
          "MarkdownDocumentation": "`CloudWatchLogsLogGroup`\n",
          "Type": "CloudWatchLogsLogGroup"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::StateMachine.LogDestination`\n"
    },
    "AWS::Serverless::StateMachine.LoggingConfiguration": {
      "Properties": {
        "Destinations": {
          "MarkdownDocumentation": "`Destinations`\n\nDefines what execution history events are logged and where they are logged.\n###### Note\nBy default, the `level` is set to `OFF`. For more information\nsee [Log Levels](https://docs.aws.amazon.com/step-functions/latest/dg/cloudwatch-log-level.html) in the AWS Step Functions User Guide.\n*Required*: No\n*Type*: [LoggingConfiguration](./aws-properties-stepfunctions-statemachine-loggingconfiguration.html)\n*Update requires*: [No interruption](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-updating-stacks-update-behaviors.html#update-no-interrupt)\n",
          "Type": "List",
          "ItemType": "LogDestination"
        },
        "IncludeExecutionData": {
          "MarkdownDocumentation": "`IncludeExecutionData`\n\nDefines what execution history events are logged and where they are logged.\n###### Note\nBy default, the `level` is set to `OFF`. For more information\nsee [Log Levels](https://docs.aws.amazon.com/step-functions/latest/dg/cloudwatch-log-level.html) in the AWS Step Functions User Guide.\n*Required*: No\n*Type*: [LoggingConfiguration](./aws-properties-stepfunctions-statemachine-loggingconfiguration.html)\n*Update requires*: [No interruption](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-updating-stacks-update-behaviors.html#update-no-interrupt)\n",
          "Type": "boolean"
        },
        "Level": {
          "MarkdownDocumentation": "`Level`\n\nDefines what execution history events are logged and where they are logged.\n###### Note\nBy default, the `level` is set to `OFF`. For more information\nsee [Log Levels](https://docs.aws.amazon.com/step-functions/latest/dg/cloudwatch-log-level.html) in the AWS Step Functions User Guide.\n*Required*: No\n*Type*: [LoggingConfiguration](./aws-properties-stepfunctions-statemachine-loggingconfiguration.html)\n*Update requires*: [No interruption](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-updating-stacks-update-behaviors.html#update-no-interrupt)\n",
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::StateMachine.LoggingConfiguration`\n\nDefines what execution history events are logged and where they are logged.\n###### Note\nBy default, the `level` is set to `OFF`. For more information\nsee [Log Levels](https://docs.aws.amazon.com/step-functions/latest/dg/cloudwatch-log-level.html) in the AWS Step Functions User Guide.\n*Required*: No\n*Type*: [LoggingConfiguration](./aws-properties-stepfunctions-statemachine-loggingconfiguration.html)\n*Update requires*: [No interruption](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-updating-stacks-update-behaviors.html#update-no-interrupt)\n"
    },
    "AWS::Serverless::StateMachine.S3Location": {
      "Properties": {
        "Bucket": {
          "MarkdownDocumentation": "`Bucket`\n\nThe name of the S3 bucket where the state machine definition is stored. The state machine definition must be a JSON or YAML file.\n*Required*: No\n*Type*: [S3Location](./aws-properties-stepfunctions-statemachine-s3location.html)\n*Update requires*: [No interruption](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-updating-stacks-update-behaviors.html#update-no-interrupt)\n",
          "Type": "string"
        },
        "Key": {
          "MarkdownDocumentation": "`Key`\n\nThe name of the S3 bucket where the state machine definition is stored. The state machine definition must be a JSON or YAML file.\n*Required*: No\n*Type*: [S3Location](./aws-properties-stepfunctions-statemachine-s3location.html)\n*Update requires*: [No interruption](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-updating-stacks-update-behaviors.html#update-no-interrupt)\n",
          "Type": "string"
        },
        "Version": {
          "MarkdownDocumentation": "`Version`\n\nThe name of the S3 bucket where the state machine definition is stored. The state machine definition must be a JSON or YAML file.\n*Required*: No\n*Type*: [S3Location](./aws-properties-stepfunctions-statemachine-s3location.html)\n*Update requires*: [No interruption](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-updating-stacks-update-behaviors.html#update-no-interrupt)\n",
          "Type": "number"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::StateMachine.S3Location`\n\nThe name of the S3 bucket where the state machine definition is stored. The state machine definition must be a JSON or YAML file.\n*Required*: No\n*Type*: [S3Location](./aws-properties-stepfunctions-statemachine-s3location.html)\n*Update requires*: [No interruption](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-updating-stacks-update-behaviors.html#update-no-interrupt)\n"
    },
    "AWS::Serverless::StateMachine.SAMPolicyTemplate": {
      "Properties": {
        "LambdaInvokePolicy": {
          "MarkdownDocumentation": "`LambdaInvokePolicy`\n",
          "Type": "FunctionSAMPT"
        },
        "StepFunctionsExecutionPolicy": {
          "MarkdownDocumentation": "`StepFunctionsExecutionPolicy`\n",
          "Type": "StateMachineSAMPT"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::StateMachine.SAMPolicyTemplate`\n"
    },
    "AWS::Serverless::StateMachine.ScheduleEvent": {
      "Properties": {
        "Input": {
          "MarkdownDocumentation": "`Input`\n",
          "Type": "string"
        },
        "Schedule": {
          "MarkdownDocumentation": "`Schedule`\n",
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::StateMachine.ScheduleEvent`\n"
    },
    "AWS::Serverless::StateMachine.StateMachineSAMPT": {
      "Properties": {
        "StateMachineName": {
          "MarkdownDocumentation": "`StateMachineName`\n",
          "Type": "string"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::StateMachine.StateMachineSAMPT`\n"
    },
    "AWS::Serverless::StateMachine.TracingConfiguration": {
      "Properties": {
        "Enabled": {
          "MarkdownDocumentation": "`Enabled`\n\nSelects whether or not the state machine's AWS X-Ray tracing is enabled.\n*Required*: No\n*Type*: [TracingConfiguration](./aws-properties-stepfunctions-statemachine-tracingconfiguration.html)\n*Update requires*: [No interruption](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-updating-stacks-update-behaviors.html#update-no-interrupt)\n",
          "Type": "boolean"
        }
      },
      "MarkdownDocumentation": "`AWS::Serverless::StateMachine.TracingConfiguration`\n\nSelects whether or not the state machine's AWS X-Ray tracing is enabled.\n*Required*: No\n*Type*: [TracingConfiguration](./aws-properties-stepfunctions-statemachine-tracingconfiguration.html)\n*Update requires*: [No interruption](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-updating-stacks-update-behaviors.html#update-no-interrupt)\n"
    }
  },
  "parse_success_ratio": 0.4306
}